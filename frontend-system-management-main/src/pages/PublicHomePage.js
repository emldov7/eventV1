import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import {
  Container,
  Typography,
  Box,
  Button,
  Grid,
  Card,
  CardContent,
  CardActions,
  Chip,
  Paper,
  AppBar,
  Toolbar,
  useTheme,
  useMediaQuery,
  IconButton,
  Menu,
  MenuItem,
  Avatar,
} from '@mui/material';
import {
  Event as EventIcon,
  LocationOn as LocationIcon,
  CalendarToday as CalendarIcon,
  People as PeopleIcon,
  Login as LoginIcon,
  PersonAdd as PersonAddIcon,
  AccountCircle as AccountIcon,
  Home as HomeIcon,
  Bookmark as BookmarkIcon,
  Logout as LogoutIcon,
  Brightness4 as ThemeIcon,
  Brightness7 as Brightness7Icon,
  Info as InfoIcon,
  ContactSupport as ContactIcon,
  Menu as MenuIcon,
  Close as CloseIcon,
} from '@mui/icons-material';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import api from '../services/api';
import { toggleDarkMode } from '../store/slices/uiSlice';

const PublicHomePage = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const { isAuthenticated, user } = useSelector((state) => state.auth);
  const { darkMode } = useSelector((state) => state.ui);
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  
  // √âtat pour le menu utilisateur
  const [anchorEl, setAnchorEl] = useState(null);
  const open = Boolean(anchorEl);
  
  // √âtat pour le menu mobile
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  
  const handleMenuOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };
  
  const handleMenuClose = () => {
    setAnchorEl(null);
  };
  
  const handleMobileMenuToggle = () => {
    setMobileMenuOpen(!mobileMenuOpen);
  };
  
  const handleMobileMenuClose = () => {
    setMobileMenuOpen(false);
  };
  
  const handleLogout = () => {
    // TODO: Impl√©menter la d√©connexion
    handleMenuClose();
    navigate('/login');
  };

  // Fonctions pour les nouvelles ic√¥nes
  const handleThemeToggle = () => {
    dispatch(toggleDarkMode());
  };


  const handleEvents = () => {
    // üéØ NOUVELLE LOGIQUE : Permettre aux visiteurs de voir tous les √©v√©nements
    if (isAuthenticated) {
      navigate('/dashboard/events');
    } else {
      navigate('/public/events'); // Route publique pour tous les √©v√©nements
    }
  };

  const handleAbout = () => {
    navigate('/about');
  };

  const handleContact = () => {
    navigate('/contact');
  };

  useEffect(() => {
    fetchPublicEvents();
  }, []);

  const fetchPublicEvents = async () => {
    try {
      setLoading(true);
      // R√©cup√©rer tous les √©v√©nements avec tous les d√©tails
      const response = await api.get('/events/', {
        params: {
          page_size: 100, // R√©cup√©rer plus d'√©v√©nements
        }
      });
      
      // Debug: afficher les donn√©es re√ßues
      console.log('üîç [PUBLIC_HOME] Donn√©es re√ßues de l\'API:', response.data);
      if (response.data.results) {
        console.log('üîç [PUBLIC_HOME] Premier √©v√©nement:', response.data.results[0]);
        console.log('üîç [PUBLIC_HOME] current_registrations du premier √©v√©nement:', response.data.results[0]?.current_registrations);
      }
      
      setEvents(response.data.results || response.data || []);
    } catch (error) {
      console.error('Erreur lors du chargement des √©v√©nements:', error);
      setEvents([]);
    } finally {
      setLoading(false);
    }
  };

  const handleEventClick = (eventId) => {
    // üéØ NOUVELLE LOGIQUE : Permettre aux visiteurs de voir les √©v√©nements
    // Plus besoin de rediriger vers /login - on va directement aux d√©tails
    if (isAuthenticated) {
      navigate(`/dashboard/events/${eventId}`);
    } else {
      navigate(`/public/events/${eventId}`);
    }
  };

  const handleLogin = () => {
    navigate('/login');
  };

  const handleRegister = () => {
    navigate('/register');
  };

  return (
    <Box sx={{ minHeight: '100vh', bgcolor: 'background.default' }}>
      {/* Header public */}
      <AppBar 
        position="static" 
        sx={{ 
          background: 'linear-gradient(135deg, rgba(108,99,255,0.95) 0%, rgba(34,211,238,0.95) 100%)',
          boxShadow: '0 2px 20px rgba(108,99,255,0.3)',
        }}
      >
        <Toolbar sx={{ justifyContent: 'space-between' }}>
          {/* Logo et titre */}
          <Typography 
            variant="h5" 
            component="h1" 
            sx={{ 
              fontWeight: 700, 
              color: 'white',
              cursor: 'pointer',
              fontSize: { xs: '1.2rem', sm: '1.5rem' },
            }}
            onClick={() => navigate('/')}
          >
            üéâ Gestion d'√âv√©nements
          </Typography>
          
          {/* Navigation desktop */}
          <Box sx={{ display: { xs: 'none', md: 'flex' }, alignItems: 'center', gap: 2 }}>
            {/* Ic√¥ne th√®me */}
            <IconButton
              onClick={handleThemeToggle}
              sx={{
                color: 'white',
                '&:hover': {
                  backgroundColor: 'rgba(255,255,255,0.15)',
                },
              }}
            >
              {darkMode ? <Brightness7Icon /> : <ThemeIcon />}
            </IconButton>


            {/* Ic√¥ne √©v√©nements */}
            <IconButton
              onClick={handleEvents}
              sx={{
                color: 'white',
                '&:hover': {
                  backgroundColor: 'rgba(255,255,255,0.15)',
                },
              }}
            >
              <EventIcon />
            </IconButton>

            {/* Lien √Ä propos */}
            <Button
              startIcon={<InfoIcon />}
              onClick={handleAbout}
              sx={{
                color: 'white',
                '&:hover': {
                  backgroundColor: 'rgba(255,255,255,0.15)',
                },
                fontWeight: 500,
              }}
            >
              √Ä propos
            </Button>

            {/* Lien Contact */}
            <Button
              startIcon={<ContactIcon />}
              onClick={handleContact}
              sx={{
                color: 'white',
                '&:hover': {
                  backgroundColor: 'rgba(255,255,255,0.15)',
                },
                fontWeight: 500,
              }}
            >
              Contact
            </Button>
            
            {/* Boutons de connexion/inscription ou profil utilisateur */}
            <Box sx={{ display: 'flex', gap: 2, ml: 2 }}>
              {!isAuthenticated ? (
                // Boutons pour visiteurs non connect√©s
                <>
                  <Button
                    variant="outlined"
                    startIcon={<LoginIcon />}
                    onClick={handleLogin}
                    sx={{
                      borderColor: 'rgba(255,255,255,0.7)',
                      color: 'white',
                      '&:hover': {
                        backgroundColor: 'rgba(255,255,255,0.15)',
                        borderColor: 'white',
                      },
                      fontWeight: 600,
                    }}
                  >
                    Se connecter
                  </Button>
                  
                  <Button
                    variant="contained"
                    startIcon={<PersonAddIcon />}
                    onClick={handleRegister}
                    sx={{
                      backgroundColor: 'white',
                      color: 'primary.main',
                      fontWeight: 600,
                      '&:hover': {
                        backgroundColor: 'rgba(255,255,255,0.9)',
                        transform: 'translateY(-1px)',
                      },
                    }}
                  >
                    S'inscrire
                  </Button>
                </>
              ) : (
                // Ic√¥ne profil pour utilisateurs connect√©s
                <>
                  <IconButton
                    onClick={handleMenuOpen}
                    sx={{
                      color: 'white',
                      '&:hover': {
                        backgroundColor: 'rgba(255,255,255,0.15)',
                      },
                    }}
                  >
                    <Avatar
                      sx={{
                        width: 40,
                        height: 40,
                        bgcolor: 'rgba(255,255,255,0.2)',
                        color: 'white',
                        fontWeight: 600,
                      }}
                    >
                      {user?.username?.charAt(0)?.toUpperCase() || 'U'}
                    </Avatar>
                  </IconButton>
                  
                  {/* Menu d√©roulant utilisateur */}
                  <Menu
                    anchorEl={anchorEl}
                    open={open}
                    onClose={handleMenuClose}
                    PaperProps={{
                      sx: {
                        mt: 1,
                        minWidth: 200,
                        boxShadow: '0 8px 25px rgba(0,0,0,0.15)',
                        borderRadius: 2,
                      },
                    }}
                  >
                    <MenuItem onClick={() => { handleMenuClose(); navigate('/profile'); }}>
                      <AccountIcon sx={{ mr: 2, color: 'primary.main' }} />
                      Mon Profil
                    </MenuItem>
                    <MenuItem onClick={() => { handleMenuClose(); navigate('/'); }}>
                      <HomeIcon sx={{ mr: 2, color: 'primary.main' }} />
                      Accueil
                    </MenuItem>
                    <MenuItem onClick={() => { handleMenuClose(); navigate('/dashboard/events'); }}>
                      <EventIcon sx={{ mr: 2, color: 'primary.main' }} />
                      √âv√©nements
                    </MenuItem>
                    <MenuItem onClick={() => { handleMenuClose(); navigate('/my-registrations'); }}>
                      <BookmarkIcon sx={{ mr: 2, color: 'primary.main' }} />
                      Mes Inscriptions
                    </MenuItem>
                    <MenuItem onClick={handleLogout}>
                      <LogoutIcon sx={{ mr: 2, color: 'error.main' }} />
                      D√©connexion
                    </MenuItem>
                  </Menu>
                </>
              )}
            </Box>
          </Box>
          
          {/* Menu hamburger pour mobile */}
          <Box sx={{ display: { xs: 'flex', md: 'none' }, alignItems: 'center', gap: 1 }}>
            {/* Ic√¥nes essentielles pour mobile */}
            <IconButton
              onClick={handleThemeToggle}
              sx={{
                color: 'white',
                '&:hover': {
                  backgroundColor: 'rgba(255,255,255,0.15)',
                },
              }}
            >
              {darkMode ? <Brightness7Icon /> : <ThemeIcon />}
            </IconButton>
            
            <IconButton
              onClick={handleMobileMenuToggle}
              sx={{
                color: 'white',
                '&:hover': {
                  backgroundColor: 'rgba(255,255,255,0.15)',
                },
              }}
            >
              {mobileMenuOpen ? <CloseIcon /> : <MenuIcon />}
            </IconButton>
          </Box>
        </Toolbar>
        
        {/* Menu mobile */}
        {mobileMenuOpen && (
          <Box
            sx={{
              display: { xs: 'block', md: 'none' },
              backgroundColor: 'rgba(0,0,0,0.9)',
              backdropFilter: 'blur(10px)',
              borderTop: '1px solid rgba(255,255,255,0.1)',
            }}
          >
            <Box sx={{ p: 2, display: 'flex', flexDirection: 'column', gap: 1 }}>
              
              {/* √âv√©nements */}
              <Button
                startIcon={<EventIcon />}
                onClick={() => { handleEvents(); handleMobileMenuClose(); }}
                sx={{
                  color: 'white',
                  justifyContent: 'flex-start',
                  '&:hover': {
                    backgroundColor: 'rgba(255,255,255,0.15)',
                  },
                }}
              >
                √âv√©nements
              </Button>
              
              {/* √Ä propos */}
              <Button
                startIcon={<InfoIcon />}
                onClick={() => { handleAbout(); handleMobileMenuClose(); }}
                sx={{
                  color: 'white',
                  justifyContent: 'flex-start',
                  '&:hover': {
                    backgroundColor: 'rgba(255,255,255,0.15)',
                  },
                }}
              >
                √Ä propos
              </Button>
              
              {/* Contact */}
              <Button
                startIcon={<ContactIcon />}
                onClick={() => { handleContact(); handleMobileMenuClose(); }}
                sx={{
                  color: 'white',
                  justifyContent: 'flex-start',
                  '&:hover': {
                    backgroundColor: 'rgba(255,255,255,0.15)',
                  },
                }}
              >
                Contact
              </Button>
              
              {/* Boutons de connexion/inscription pour mobile */}
              {!isAuthenticated ? (
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1, mt: 2 }}>
                  <Button
                    variant="outlined"
                    startIcon={<LoginIcon />}
                    onClick={() => { handleLogin(); handleMobileMenuClose(); }}
                    sx={{
                      borderColor: 'rgba(255,255,255,0.7)',
                      color: 'white',
                      '&:hover': {
                        backgroundColor: 'rgba(255,255,255,0.15)',
                        borderColor: 'white',
                      },
                      fontWeight: 600,
                    }}
                  >
                    Se connecter
                  </Button>
                  
                  <Button
                    variant="contained"
                    startIcon={<PersonAddIcon />}
                    onClick={() => { handleRegister(); handleMobileMenuClose(); }}
                    sx={{
                      backgroundColor: 'white',
                      color: 'primary.main',
                      fontWeight: 600,
                      '&:hover': {
                        backgroundColor: 'rgba(255,255,255,0.9)',
                      },
                    }}
                  >
                    S'inscrire
                  </Button>
                </Box>
              ) : (
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1, mt: 2 }}>
                  <Button
                    startIcon={<AccountIcon />}
                    onClick={() => { navigate('/profile'); handleMobileMenuClose(); }}
                    sx={{
                      color: 'white',
                      justifyContent: 'flex-start',
                      '&:hover': {
                        backgroundColor: 'rgba(255,255,255,0.15)',
                      },
                    }}
                  >
                    Mon Profil
                  </Button>
                  
                  <Button
                    startIcon={<EventIcon />}
                    onClick={() => { navigate('/dashboard/events'); handleMobileMenuClose(); }}
                    sx={{
                      color: 'white',
                      justifyContent: 'flex-start',
                      '&:hover': {
                        backgroundColor: 'rgba(255,255,255,0.15)',
                      },
                    }}
                  >
                    √âv√©nements
                  </Button>
                  
                  <Button
                    startIcon={<BookmarkIcon />}
                    onClick={() => { navigate('/my-registrations'); handleMobileMenuClose(); }}
                    sx={{
                      color: 'white',
                      justifyContent: 'flex-start',
                      '&:hover': {
                        backgroundColor: 'rgba(255,255,255,0.15)',
                      },
                    }}
                  >
                    Mes Inscriptions
                  </Button>
                  
                  <Button
                    startIcon={<LogoutIcon />}
                    onClick={() => { handleLogout(); handleMobileMenuClose(); }}
                    sx={{
                      color: 'white',
                      justifyContent: 'flex-start',
                      '&:hover': {
                        backgroundColor: 'rgba(255,255,255,0.15)',
                      },
                    }}
                  >
                    D√©connexion
                  </Button>
                </Box>
              )}
            </Box>
          </Box>
        )}
      </AppBar>

      {/* Contenu principal */}
      <Container maxWidth="lg" sx={{ mt: 4, mb: 6 }}>
        {/* Section h√©ro */}
        <Paper 
          elevation={0}
          sx={{
            p: { xs: 4, md: 6 },
            mb: 6,
            background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)',
            borderRadius: 3,
            textAlign: 'center',
            border: '1px solid rgba(108,99,255,0.1)',
          }}
        >
          <Typography 
            variant="h2" 
            component="h1" 
            sx={{ 
              fontWeight: 800, 
              mb: 3,
              background: 'linear-gradient(135deg, #6C63FF 0%, #22D3EE 100%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text',
              fontSize: { xs: '2rem', md: '3rem' },
            }}
          >
            D√©couvrez des √©v√©nements incroyables
          </Typography>
          
          <Typography 
            variant="h6" 
            color="text.secondary" 
            sx={{ 
              mb: 4, 
              maxWidth: 600, 
              mx: 'auto',
              lineHeight: 1.6,
            }}
          >
            Explorez notre s√©lection d'√©v√©nements et inscrivez-vous √† ceux qui vous int√©ressent. 
            Cr√©ez un compte pour suivre vos inscriptions et acc√©der √† plus de fonctionnalit√©s !
          </Typography>
          
          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>
            <Button
              variant="contained"
              size="large"
              startIcon={<PersonAddIcon />}
              onClick={handleRegister}
              sx={{
                px: 4,
                py: 1.5,
                fontSize: '1.1rem',
                fontWeight: 600,
                background: 'linear-gradient(135deg, #6C63FF 0%, #22D3EE 100%)',
                '&:hover': {
                  transform: 'translateY(-2px)',
                  boxShadow: '0 8px 25px rgba(108,99,255,0.3)',
                },
              }}
            >
              Commencer maintenant
            </Button>
            
            <Button
              variant="outlined"
              size="large"
              startIcon={<EventIcon />}
              onClick={() => document.getElementById('events-section').scrollIntoView({ behavior: 'smooth' })}
              sx={{
                px: 4,
                py: 1.5,
                fontSize: '1.1rem',
                fontWeight: 600,
                borderColor: 'primary.main',
                color: 'primary.main',
                '&:hover': {
                  backgroundColor: 'primary.main',
                  color: 'white',
                  transform: 'translateY(-2px)',
                },
              }}
            >
              Voir les √©v√©nements
            </Button>
          </Box>
        </Paper>

        {/* Section √©v√©nements */}
        <Box id="events-section">
          <Typography 
            variant="h4" 
            component="h2" 
            sx={{ 
              fontWeight: 700, 
              mb: 4, 
              textAlign: 'center',
              color: 'text.primary',
            }}
          >
            √âv√©nements disponibles
          </Typography>

          {loading ? (
            <Box sx={{ textAlign: 'center', py: 4 }}>
              <Typography variant="body1" color="text.secondary">
                Chargement des √©v√©nements...
              </Typography>
            </Box>
          ) : events.length > 0 ? (
            <>
              <Typography 
                variant="h6" 
                sx={{ 
                  textAlign: 'center', 
                  mb: 4, 
                  color: 'text.secondary',
                  fontWeight: 500,
                }}
              >
                {events.length} √©v√©nement(s) trouv√©(s)
              </Typography>
              
              <Grid container spacing={3}>
                {events.map((event) => (
                  <Grid item xs={12} sm={6} md={4} key={event.id}>
                    <Card 
                      elevation={2}
                      sx={{
                        height: '100%',
                        display: 'flex',
                        flexDirection: 'column',
                        cursor: 'pointer',
                        transition: 'all 0.3s ease-in-out',
                        '&:hover': {
                          transform: 'translateY(-4px)',
                          boxShadow: '0 8px 25px rgba(108,99,255,0.2)',
                        },
                      }}
                      onClick={() => handleEventClick(event.id)}
                    >
                      {/* Image de l'√©v√©nement */}
                      <Box
                        sx={{
                          height: 200,
                          backgroundImage: event.poster 
                            ? `url(${event.poster})`
                            : 'linear-gradient(135deg, #6C63FF 0%, #22D3EE 100%)',
                          backgroundSize: 'cover',
                          backgroundPosition: 'center',
                          backgroundRepeat: 'no-repeat',
                          position: 'relative',
                          borderRadius: '8px 8px 0 0',
                        }}
                      >
                        {/* Identifiant de l'√©v√©nement */}
                        <Box
                          sx={{
                            position: 'absolute',
                            top: 8,
                            left: 8,
                            backgroundColor: 'rgba(0,0,0,0.7)',
                            color: 'white',
                            px: 1.5,
                            py: 0.5,
                            borderRadius: 1,
                            fontSize: '0.75rem',
                            fontWeight: 600,
                          }}
                        >
                          {event.id}
                        </Box>
                        
                        {/* Statut de l'√©v√©nement */}
                        <Box
                          sx={{
                            position: 'absolute',
                            top: 8,
                            right: 8,
                            backgroundColor: 'success.main',
                            color: 'white',
                            px: 1.5,
                            py: 0.5,
                            borderRadius: 1,
                            fontSize: '0.75rem',
                            fontWeight: 600,
                          }}
                        >
                          Publi√©
                        </Box>
                      </Box>

                      <CardContent sx={{ flexGrow: 1, p: 2 }}>
                        {/* Titre de l'√©v√©nement */}
                        <Typography 
                          variant="h6" 
                          component="h3" 
                          sx={{ 
                            fontWeight: 600, 
                            mb: 1,
                            color: 'text.primary',
                            lineHeight: 1.3,
                          }}
                        >
                          {event.title}
                        </Typography>
                        
                        {/* Sous-titre ou description courte */}
                        {event.description && (
                          <Typography 
                            variant="body2" 
                            color="text.secondary" 
                            sx={{ 
                              mb: 2,
                              lineHeight: 1.4,
                              display: '-webkit-box',
                              WebkitLineClamp: 2,
                              WebkitBoxOrient: 'vertical',
                              overflow: 'hidden',
                            }}
                          >
                            {event.description}
                          </Typography>
                        )}
                        
                        {/* D√©tails de l'√©v√©nement */}
                        <Box sx={{ mb: 2 }}>
                          {/* Date et heure */}
                          <Typography 
                            variant="body2" 
                            color="text.secondary" 
                            sx={{ 
                              display: 'flex', 
                              alignItems: 'center', 
                              gap: 1, 
                              mb: 1,
                              fontSize: '0.875rem',
                            }}
                          >
                            <CalendarIcon fontSize="small" />
                            {format(new Date(event.start_date), 'dd MMM yyyy √† HH:mm', { locale: fr })}
                          </Typography>
                          
                          {/* Lieu */}
                          {event.location && (
                            <Typography 
                              variant="body2" 
                              color="text.secondary" 
                              sx={{ 
                                display: 'flex', 
                                alignItems: 'center', 
                                gap: 1, 
                                mb: 1,
                                fontSize: '0.875rem',
                              }}
                            >
                              <LocationIcon fontSize="small" />
                              {event.location}
                            </Typography>
                          )}
                          
                          {/* Prix */}
                          {event.price && (
                            <Typography 
                              variant="body2" 
                              color="primary.main" 
                              sx={{ 
                                display: 'flex', 
                                alignItems: 'center', 
                                gap: 1, 
                                mb: 1,
                                fontSize: '0.875rem',
                                fontWeight: 600,
                              }}
                            >
                              üí∞ $ {parseFloat(event.price).toFixed(2)} $US
                            </Typography>
                          )}
                          
                          {/* Participants */}
                          {event.max_capacity && (
                            <Typography 
                              variant="body2" 
                              color="text.secondary" 
                              sx={{ 
                                display: 'flex', 
                                alignItems: 'center', 
                                gap: 1,
                                fontSize: '0.875rem',
                              }}
                            >
                              <PeopleIcon fontSize="small" />
                              {event.current_registrations || 0} inscrits
                            </Typography>
                          )}
                        </Box>
                        
                        {/* Cat√©gorie */}
                        {event.category && (
                          <Chip
                            label={event.category.name}
                            size="small"
                            sx={{ 
                              mb: 2,
                              backgroundColor: 'primary.main',
                              color: 'white',
                              fontWeight: 500,
                              fontSize: '0.75rem',
                            }}
                          />
                        )}
                      </CardContent>
                      
                      <CardActions sx={{ p: 2, pt: 0 }}>
                        <Button
                          variant="outlined"
                          fullWidth
                          startIcon={<EventIcon />}
                          onClick={(e) => {
                            e.stopPropagation();
                            handleEventClick(event.id);
                          }}
                          sx={{
                            fontWeight: 600,
                            borderColor: 'primary.main',
                            color: 'primary.main',
                            '&:hover': {
                              backgroundColor: 'primary.main',
                              color: 'white',
                            },
                          }}
                        >
                          Voir les d√©tails
                        </Button>
                      </CardActions>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            </>
          ) : (
            <Paper 
              elevation={0}
              sx={{
                p: 6,
                textAlign: 'center',
                background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)',
                borderRadius: 3,
                border: '2px dashed rgba(108,99,255,0.2)',
              }}
            >
              <EventIcon sx={{ fontSize: 64, color: 'text.disabled', mb: 2 }} />
              <Typography variant="h6" color="text.secondary" sx={{ mb: 2 }}>
                Aucun √©v√©nement disponible pour le moment
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Revenez bient√¥t pour d√©couvrir de nouveaux √©v√©nements !
              </Typography>
            </Paper>
          )}
        </Box>

                 {/* Section CTA - Diff√©rente selon l'√©tat de connexion */}
         {events.length > 0 && (
           <Paper 
             elevation={0}
             sx={{
               p: { xs: 4, md: 6 },
               mt: 6,
               background: 'linear-gradient(135deg, #6C63FF 0%, #22D3EE 100%)',
               borderRadius: 3,
               textAlign: 'center',
               color: 'white',
             }}
           >
             {!isAuthenticated ? (
               // CTA pour visiteurs non connect√©s
               <>
                 <Typography 
                   variant="h4" 
                   component="h2" 
                   sx={{ 
                     fontWeight: 700, 
                     mb: 3,
                     color: 'white',
                   }}
                 >
                   Pr√™t √† participer ?
                 </Typography>
                 
                 <Typography 
                   variant="h6" 
                   sx={{ 
                     mb: 4, 
                     maxWidth: 600, 
                     mx: 'auto',
                     opacity: 0.9,
                     lineHeight: 1.6,
                   }}
                 >
                   Cr√©ez votre compte gratuitement pour vous inscrire aux √©v√©nements, 
                   suivre vos participations et acc√©der √† plus de fonctionnalit√©s !
                 </Typography>
                 
                 <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>
                   <Button
                     variant="contained"
                     size="large"
                     startIcon={<PersonAddIcon />}
                     onClick={handleRegister}
                     sx={{
                       px: 4,
                       py: 1.5,
                       fontSize: '1.1rem',
                       fontWeight: 600,
                       backgroundColor: 'white',
                       color: 'primary.main',
                       '&:hover': {
                         backgroundColor: 'rgba(255,255,255,0.9)',
                         transform: 'translateY(-2px)',
                       },
                     }}
                   >
                     Cr√©er mon compte
                   </Button>
                   
                   <Button
                     variant="outlined"
                     size="large"
                     startIcon={<LoginIcon />}
                     onClick={handleLogin}
                     sx={{
                       px: 4,
                       py: 1.5,
                       fontSize: '1.1rem',
                       fontWeight: 600,
                       borderColor: 'white',
                       color: 'white',
                       '&:hover': {
                         backgroundColor: 'rgba(255,255,255,0.15)',
                         borderColor: 'white',
                         transform: 'translateY(-2px)',
                       },
                     }}
                   >
                     Me connecter
                   </Button>
                 </Box>
               </>
             ) : (
               // CTA pour utilisateurs connect√©s
               <>
                 <Typography 
                   variant="h4" 
                   component="h2" 
                   sx={{ 
                     fontWeight: 700, 
                     mb: 3,
                     color: 'white',
                   }}
                 >
                   Bienvenue, {user?.username || 'Utilisateur'} ! üéâ
                 </Typography>
                 
                 <Typography 
                   variant="h6" 
                   sx={{ 
                     mb: 4, 
                     maxWidth: 600, 
                     mx: 'auto',
                     opacity: 0.9,
                     lineHeight: 1.6,
                   }}
                 >
                   Explorez les √©v√©nements disponibles et inscrivez-vous √† ceux qui vous int√©ressent ! 
                   Utilisez le menu en haut √† droite pour acc√©der √† votre profil et vos inscriptions.
                 </Typography>
                 
                 <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>
                   <Button
                     variant="contained"
                     size="large"
                     startIcon={<EventIcon />}
                     onClick={() => navigate('/dashboard/events')}
                     sx={{
                       px: 4,
                       py: 1.5,
                       fontSize: '1.1rem',
                       fontWeight: 600,
                       backgroundColor: 'white',
                       color: 'primary.main',
                       '&:hover': {
                         backgroundColor: 'rgba(255,255,255,0.9)',
                         transform: 'translateY(-2px)',
                       },
                     }}
                   >
                     Voir tous les √©v√©nements
                   </Button>
                   
                   <Button
                     variant="outlined"
                     size="large"
                     startIcon={<BookmarkIcon />}
                     onClick={() => navigate('/my-registrations')}
                     sx={{
                       px: 4,
                       py: 1.5,
                       fontSize: '1.1rem',
                       fontWeight: 600,
                       borderColor: 'white',
                       color: 'white',
                       '&:hover': {
                         backgroundColor: 'rgba(255,255,255,0.15)',
                         borderColor: 'white',
                         transform: 'translateY(-2px)',
                       },
                     }}
                   >
                     Mes inscriptions
                   </Button>
                 </Box>
               </>
             )}
           </Paper>
         )}
      </Container>
    </Box>
  );
};

export default PublicHomePage;
