# Generated by Django 4.2.7 on 2025-08-15 07:41

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('events', '0006_event_access_type_event_virtual_link_userprofile'),
    ]

    operations = [
        migrations.AlterField(
            model_name='notificationlog',
            name='type',
            field=models.CharField(choices=[('reminder_1d', 'Rappel J-1'), ('reminder_1h', 'Rappel 1h avant'), ('reminder_day', 'Rappel jour J'), ('update', 'Mise à jour'), ('thank_you', 'Remerciement')], max_length=20),
        ),
        migrations.CreateModel(
            name='RefundRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvé'), ('processed', 'Traité'), ('rejected', 'Rejeté'), ('expired', 'Expiré')], default='pending', max_length=20)),
                ('reason', models.TextField(blank=True, help_text="Raison de l'annulation")),
                ('amount_paid', models.DecimalField(decimal_places=2, help_text='Montant initialement payé', max_digits=10)),
                ('refund_percentage', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(100)])),
                ('refund_amount', models.DecimalField(decimal_places=2, help_text='Montant à rembourser', max_digits=10)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('stripe_refund_id', models.CharField(blank=True, help_text='ID du remboursement Stripe', max_length=100)),
                ('auto_process_at', models.DateTimeField(blank=True, help_text='Date de traitement automatique', null=True)),
                ('expires_at', models.DateTimeField(help_text='Date limite pour le remboursement')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_refunds', to=settings.AUTH_USER_MODEL)),
                ('registration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='refund_request', to='events.eventregistration')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RefundPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode', models.CharField(choices=[('disabled', 'Remboursements désactivés'), ('manual', 'Remboursement manuel uniquement'), ('auto', 'Remboursement automatique'), ('mixed', 'Manuel puis automatique après délai')], default='manual', max_length=20)),
                ('auto_refund_delay_hours', models.PositiveIntegerField(default=24, help_text='Délai en heures avant remboursement automatique (si mode auto/mixed)')),
                ('refund_percentage_immediate', models.PositiveIntegerField(default=100, help_text='% remboursé si annulation immédiate', validators=[django.core.validators.MaxValueValidator(100)])),
                ('refund_percentage_after_delay', models.PositiveIntegerField(default=80, help_text='% remboursé après le délai', validators=[django.core.validators.MaxValueValidator(100)])),
                ('cutoff_hours_before_event', models.PositiveIntegerField(default=24, help_text="Nombre d'heures avant l'événement où les remboursements cessent")),
                ('allow_partial_refunds', models.BooleanField(default=True, help_text='Autoriser les remboursements partiels')),
                ('require_reason', models.BooleanField(default=False, help_text="Exiger une raison pour l'annulation")),
                ('notify_organizer_on_cancellation', models.BooleanField(default=True, help_text="Notifier l'organisateur lors d'une annulation")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='refund_policy', to='events.event')),
            ],
        ),
    ]
