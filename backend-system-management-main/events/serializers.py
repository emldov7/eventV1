from rest_framework import serializers
from django.contrib.auth.models import User
from django.utils import timezone
from django.db import models
from .models import Event, Category, Tag, EventRegistration, EventHistory, TicketType, SessionType, VirtualEvent, VirtualEventInteraction, CustomReminder, CustomReminderRecipient


class UserSerializer(serializers.ModelSerializer):
    """S√©rialiseur pour les utilisateurs"""
    class Meta:
        model = User
        fields = ['id', 'username', 'first_name', 'last_name', 'email']
        read_only_fields = ['id']


class CategorySerializer(serializers.ModelSerializer):
    """Serializer pour les cat√©gories"""
    class Meta:
        model = Category
        fields = ['id', 'name', 'description', 'color', 'icon', 'created_at', 'updated_at', 'is_active']
        read_only_fields = ['id', 'created_at', 'updated_at']


class TagSerializer(serializers.ModelSerializer):
    """Serializer pour les tags"""
    class Meta:
        model = Tag
        fields = ['id', 'name', 'color', 'created_at', 'updated_at', 'is_active']
        read_only_fields = ['id', 'created_at', 'updated_at']


class VirtualEventSerializer(serializers.ModelSerializer):
    """S√©rialiseur pour les d√©tails des √©v√©nements virtuels"""
    platform_display = serializers.CharField(source='get_platform_display', read_only=True)
    
    class Meta:
        model = VirtualEvent
        fields = [
            'id', 'platform', 'platform_display', 'meeting_id', 'meeting_password',
            'meeting_url', 'auto_record', 'allow_chat', 'allow_screen_sharing',
            'waiting_room', 'recording_url', 'recording_available',
            'recording_expires_at', 'access_instructions', 'technical_requirements',
            'created_at', 'updated_at'
        ]
        read_only_fields = ['id', 'created_at', 'updated_at']


class VirtualEventInteractionSerializer(serializers.ModelSerializer):
    """S√©rialiseur pour les interactions sur les √©v√©nements virtuels"""
    user = UserSerializer(read_only=True)
    interaction_type_display = serializers.CharField(source='get_interaction_type_display', read_only=True)
    
    class Meta:
        model = VirtualEventInteraction
        fields = [
            'id', 'event', 'user', 'interaction_type', 'interaction_type_display',
            'content', 'rating', 'ip_address', 'user_agent', 'created_at', 'updated_at'
        ]
        read_only_fields = ['id', 'user', 'ip_address', 'user_agent', 'created_at', 'updated_at']


class EventRegistrationSerializer(serializers.ModelSerializer):
    """S√©rialiseur pour les inscriptions aux √©v√©nements"""
    user = UserSerializer(read_only=True)
    event_title = serializers.CharField(source='event.title', read_only=True)
    ticket_type_name = serializers.CharField(source='ticket_type.name', read_only=True)
    session_type_name = serializers.CharField(source='session_type.name', read_only=True)
    is_virtual_event = serializers.SerializerMethodField()
    virtual_access_code = serializers.CharField(read_only=True)
    
    # üéØ NOUVEAUX CHAMPS POUR LES INVIT√âS
    guest_display_name = serializers.SerializerMethodField()
    guest_display_email = serializers.SerializerMethodField()
    guest_display_phone = serializers.SerializerMethodField()

    class Meta:
        model = EventRegistration
        fields = '__all__'
        read_only_fields = ['id', 'registered_at', 'updated_at', 'confirmed_at', 'cancelled_at', 'virtual_access_code']
    
    def get_guest_display_name(self, obj):
        """Retourne le nom √† afficher (utilisateur ou invit√©)"""
        if obj.user:
            return obj.user.get_full_name() or obj.user.username
        return obj.guest_full_name or "Invit√©"
    
    def get_guest_display_email(self, obj):
        """Retourne l'email √† afficher (utilisateur ou invit√©)"""
        if obj.user:
            return obj.user.email
        return obj.guest_email or ""
    
    def get_guest_display_phone(self, obj):
        """Retourne le t√©l√©phone √† afficher (utilisateur ou invit√©)"""
        if obj.user:
            return getattr(obj.user.profile, 'phone', '') if hasattr(obj.user, 'profile') else ''
        return obj.guest_phone or ""

    def get_is_virtual_event(self, obj):
        return obj.event.is_virtual


class EventHistorySerializer(serializers.ModelSerializer):
    """S√©rialiseur pour l'historique des √©v√©nements"""
    user = UserSerializer(read_only=True)

    class Meta:
        model = EventHistory
        fields = '__all__'
        read_only_fields = ['id', 'timestamp']


class EventSerializer(serializers.ModelSerializer):
    """S√©rialiseur principal pour les √©v√©nements"""
    category = CategorySerializer(read_only=True)
    category_id = serializers.IntegerField(write_only=True, required=False, allow_null=True)
    tags = TagSerializer(many=True, read_only=True)
    tag_ids = serializers.ListField(
        child=serializers.IntegerField(),
        write_only=True,
        required=False
    )
    organizer = UserSerializer(read_only=True)
    registrations = EventRegistrationSerializer(many=True, read_only=True)
    ticket_types = serializers.SerializerMethodField()
    history = EventHistorySerializer(many=True, read_only=True)
    virtual_details = VirtualEventSerializer(read_only=True)
    
    # Propri√©t√©s calcul√©es
    is_full = serializers.BooleanField(read_only=True)
    available_places = serializers.IntegerField(read_only=True)
    is_upcoming = serializers.BooleanField(read_only=True)
    is_ongoing = serializers.BooleanField(read_only=True)
    is_past = serializers.BooleanField(read_only=True)
    is_virtual = serializers.BooleanField(read_only=True)
    is_physical = serializers.BooleanField(read_only=True)
    
    # üéØ NOUVELLES PROPRI√âT√âS DE DISPONIBILIT√â S√âPAR√âE
    default_ticket_available_places = serializers.IntegerField(read_only=True)
    default_ticket_is_full = serializers.BooleanField(read_only=True)
    ticket_type_availability = serializers.SerializerMethodField()
    session_availability = serializers.SerializerMethodField()
    
    # üéØ NOUVELLES PROPRI√âT√âS DE PRIX POUR LES TYPES DE BILLETS
    min_ticket_price = serializers.DecimalField(max_digits=10, decimal_places=2, read_only=True)
    max_ticket_price = serializers.DecimalField(max_digits=10, decimal_places=2, read_only=True)
    price_range_display = serializers.CharField(read_only=True)
    
    # Statistiques
    registration_count = serializers.SerializerMethodField()
    confirmed_registration_count = serializers.SerializerMethodField()
    interaction_count = serializers.SerializerMethodField()

    class Meta:
        model = Event
        fields = '__all__'
        read_only_fields = [
            'id', 'slug', 'created_at', 'updated_at', 'published_at',
            'current_registrations', 'organizer'
        ]

    def get_registration_count(self, obj):
        return obj.registrations.filter(status__in=['confirmed', 'attended']).count()

    def get_confirmed_registration_count(self, obj):
        return obj.registrations.filter(status='confirmed').count()

    def get_interaction_count(self, obj):
        """Retourner des statistiques d√©taill√©es par type d'interaction"""
        interactions = obj.interactions.all()
        
        # Compter par type
        likes = interactions.filter(interaction_type='like').count()
        comments = interactions.filter(interaction_type='comment').count()
        shares = interactions.filter(interaction_type='share').count()
        ratings = interactions.filter(interaction_type='rating').count()
        
        # Calculer la note moyenne
        rating_interactions = interactions.filter(interaction_type='rating')
        avg_rating = 0
        if rating_interactions.exists():
            total_rating = sum(interaction.rating for interaction in rating_interactions if interaction.rating)
            avg_rating = round(total_rating / rating_interactions.count(), 1)
        
        return {
            'likes': likes,
            'comments': comments,
            'shares': shares,
            'ratings': ratings,
            'total': interactions.count(),
            'average_rating': avg_rating
        }

    def get_ticket_types(self, obj):
        return TicketTypeListSerializer(obj.ticket_types.all(), many=True).data

    def get_ticket_type_availability(self, obj):
        """Retourne la disponibilit√© de chaque type de billet"""
        return obj.get_ticket_type_availability()

    def get_session_availability(self, obj):
        """Retourne la disponibilit√© de chaque session"""
        return obj.get_session_availability()

    def create(self, validated_data, **kwargs):
        print(f"DEBUG: EventSerializer.create - Donn√©es valid√©es: {validated_data}")
        print(f"DEBUG: EventSerializer.create - Cl√©s disponibles: {list(validated_data.keys())}")
        print(f"DEBUG: EventSerializer.create - Kwargs re√ßus: {kwargs}")
        
        # R√©cup√©rer l'organizer depuis kwargs (pass√© par perform_create)
        organizer = kwargs.get('organizer')
        if organizer:
            validated_data['organizer'] = organizer
            print(f"DEBUG: EventSerializer.create - Organizer d√©fini: {organizer}")
        else:
            print(f"DEBUG: EventSerializer.create - Aucun organizer re√ßu dans kwargs")
        
        # G√©rer les tags
        tag_ids = validated_data.pop('tag_ids', [])
        
        # Cr√©er l'√©v√©nement
        event = Event.objects.create(**validated_data)
        
        # Ajouter les tags
        if tag_ids:
            event.tags.set(tag_ids)
        
        return event

    def update(self, instance, validated_data):
        # G√©rer les tags
        tag_ids = validated_data.pop('tag_ids', None)
        
        # Mettre √† jour l'√©v√©nement
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()
        
        # Mettre √† jour les tags si fournis
        if tag_ids is not None:
            instance.tags.set(tag_ids)
        
        return instance

    def validate_website(self, value):
        """Validation et correction automatique de l'URL du site web"""
        if not value:
            return value
        
        # Si l'URL ne commence pas par http:// ou https://, ajouter https://
        if not value.startswith(('http://', 'https://')):
            value = 'https://' + value
        
        return value

    def validate(self, data):
        """Validation personnalis√©e"""
        print(f"DEBUG: EventSerializer.validate - Donn√©es re√ßues: {data}")
        print(f"DEBUG: EventSerializer.validate - Cl√©s disponibles: {list(data.keys())}")
        
        # Validation de l'image
        if 'poster' in data:
            poster = data['poster']
            print(f"DEBUG: EventSerializer.validate - Image re√ßue: {poster}")
            print(f"DEBUG: EventSerializer.validate - Type d'image: {type(poster)}")
            if hasattr(poster, 'content_type'):
                print(f"DEBUG: EventSerializer.validate - Content-Type: {poster.content_type}")
            if hasattr(poster, 'size'):
                print(f"DEBUG: EventSerializer.validate - Taille: {poster.size}")
        
        # V√©rifier que la date de fin est apr√®s la date de d√©but
        if 'start_date' in data and 'end_date' in data:
            if data['start_date'] >= data['end_date']:
                raise serializers.ValidationError(
                    "La date de fin doit √™tre post√©rieure √† la date de d√©but."
                )
        
        # V√©rifier la coh√©rence des places
        if 'place_type' in data and 'max_capacity' in data:
            if data['place_type'] == 'limited' and not data['max_capacity']:
                raise serializers.ValidationError(
                    "La capacit√© maximale est requise pour les √©v√©nements avec places limit√©es."
                )
            elif data['place_type'] == 'unlimited' and data['max_capacity']:
                raise serializers.ValidationError(
                    "La capacit√© maximale ne doit pas √™tre d√©finie pour les √©v√©nements avec places illimit√©es."
                )
        
        # V√©rifier la coh√©rence du prix
        if 'is_free' in data and 'price' in data:
            if data['is_free'] and data['price'] > 0:
                raise serializers.ValidationError(
                    "Le prix doit √™tre 0 pour un √©v√©nement gratuit."
                )
            elif not data['is_free'] and data['price'] <= 0:
                raise serializers.ValidationError(
                    "Le prix doit √™tre sup√©rieur √† 0 pour un √©v√©nement payant."
                )
        
        return data


class TicketTypeListSerializer(serializers.ModelSerializer):
    """S√©rialiseur simplifi√© pour la liste des types de billets"""
    available_quantity = serializers.IntegerField(read_only=True)
    is_available = serializers.BooleanField(read_only=True)
    has_discount = serializers.BooleanField(read_only=True)
    effective_price = serializers.DecimalField(max_digits=10, decimal_places=2, read_only=True)
    
    class Meta:
        model = TicketType
        fields = ['id', 'name', 'description', 'price', 'discount_price', 'discount_percent', 
                 'is_discount_active', 'quantity', 'is_vip', 'sale_start', 'sale_end', 
                 'sold_count', 'available_quantity', 'is_available', 'has_discount', 'effective_price']


class TicketTypeSerializer(serializers.ModelSerializer):
    """S√©rialiseur complet pour les types de billets"""
    event_title = serializers.CharField(source='event.title', read_only=True)
    available_quantity = serializers.IntegerField(read_only=True)
    is_available = serializers.BooleanField(read_only=True)
    has_discount = serializers.BooleanField(read_only=True)
    effective_price = serializers.DecimalField(max_digits=10, decimal_places=2, read_only=True)

    class Meta:
        model = TicketType
        fields = '__all__'
        read_only_fields = ['id', 'sold_count', 'created_at']


class SessionTypeSerializer(serializers.ModelSerializer):
    """S√©rialiseur pour les types de sessions"""
    event_title = serializers.CharField(source='event.title', read_only=True)
    is_available_for_registration = serializers.SerializerMethodField()

    def get_is_available_for_registration(self, obj):
        """V√©rifie si la session est disponible pour les inscriptions"""
        return obj.is_active

    class Meta:
        model = SessionType
        fields = '__all__'
        read_only_fields = ['id', 'current_participants', 'created_at', 'updated_at']

    def validate(self, data):
        """Validation personnalis√©e pour les sessions"""
        # V√©rifier que la date de fin est apr√®s la date de d√©but
        if 'start_time' in data and 'end_time' in data:
            if data['start_time'] >= data['end_time']:
                raise serializers.ValidationError(
                    "L'heure de fin doit √™tre post√©rieure √† l'heure de d√©but."
                )
        
        # V√©rifier que la date de session est dans le futur
        if 'date' in data:
            from django.utils import timezone
            today = timezone.now().date()
            if data['date'] < today:
                raise serializers.ValidationError(
                    "La date de session ne peut pas √™tre dans le pass√©."
                )
        
        return data


class EventRegistrationCreateSerializer(serializers.ModelSerializer):
    """S√©rialiseur pour cr√©er une inscription √† un √©v√©nement"""
    session_type_id = serializers.IntegerField(write_only=True, required=False)
    
    # üéØ NOUVEAUX CHAMPS POUR LES INVIT√âS
    guest_full_name = serializers.CharField(max_length=200, required=False, write_only=True)
    guest_email = serializers.EmailField(required=False, write_only=True)
    guest_phone = serializers.CharField(max_length=20, required=False, write_only=True)
    guest_country = serializers.CharField(max_length=3, required=False, write_only=True)
    
    class Meta:
        model = EventRegistration
        fields = ['id', 'event', 'ticket_type', 'session_type', 'session_type_id', 'notes', 'special_requirements', 'status', 'payment_status', 'price_paid', 'guest_full_name', 'guest_email', 'guest_phone', 'guest_country']
        read_only_fields = ['id', 'user', 'status', 'registered_at', 'updated_at', 'payment_status']

    def validate(self, data):
        # üéØ NOUVEAU : Logs de d√©bogage d√©taill√©s
        
        # üéØ NOUVELLE VALIDATION : V√©rifier la disponibilit√© du type de billet
        ticket_type = data.get('ticket_type')
        if ticket_type and ticket_type.quantity is not None:
            if not ticket_type.is_available:
                raise serializers.ValidationError({
                    'ticket_type': f"Le type de billet '{ticket_type.name}' n'est plus disponible (quantit√© √©puis√©e)."
                })
            print(f"üîç DEBUG: Ticket type {ticket_type.name} is available: {ticket_type.available_quantity} places left")
        print(f"üîç DEBUG: validate() appel√© avec data: {data}")
        print(f"üîç DEBUG: Cl√©s dans data: {list(data.keys())}")
        print(f"üîç DEBUG: guest_full_name: {data.get('guest_full_name')}")
        print(f"üîç DEBUG: guest_email: {data.get('guest_email')}")
        print(f"üîç DEBUG: guest_phone: {data.get('guest_phone')}")
        print(f"üîç DEBUG: guest_country: {data.get('guest_country')}")
        
        event = data['event']
        request = self.context['request']
        user = getattr(request, 'user', None)
        
        # üéØ NOUVELLE LOGIQUE : G√©rer les utilisateurs connect√©s ET les invit√©s
        guest_full_name = data.get('guest_full_name')
        guest_email = data.get('guest_email')
        guest_phone = data.get('guest_phone')
        guest_country = data.get('guest_country')
        
        # D√©terminer si c'est une inscription d'invit√©
        is_guest = bool(guest_full_name and guest_email and guest_phone and guest_country)
        
        # üéØ CORRECTION MAJEURE : R√©cup√©rer le ticket_type_id depuis les donn√©es de la requ√™te
        request = self.context['request']
        ticket_type_id = request.data.get('ticket_type_id')
        ticket_type = None
        if ticket_type_id:
            try:
                ticket_type = TicketType.objects.get(id=ticket_type_id, event=event)
                print(f"üîç DEBUG: Ticket type found: {ticket_type.name}")
            except TicketType.DoesNotExist:
                print(f"üîç DEBUG: Ticket type not found: {ticket_type_id}")
                raise serializers.ValidationError("Type de billet invalide.")
        
        if is_guest:
            # üéØ VALIDATION POUR LES INVIT√âS
            print(f"üîç DEBUG: Guest registration - Name: {guest_full_name}, Email: {guest_email}")
            
            # üéØ CORRECTION CRITIQUE : V√©rifier TOUTES les inscriptions avec cet email (utilisateurs ET invit√©s)
            existing_registration = EventRegistration.objects.filter(
                event=event
            ).filter(
                models.Q(guest_email=guest_email) |  # Invit√©s avec cet email
                models.Q(user__email=guest_email)    # Utilisateurs connect√©s avec cet email
            ).first()
            
            print(f"üîç DEBUG: Existing registration search - Email: {guest_email}, Found: {existing_registration is not None}")
            if existing_registration:
                print(f"üîç DEBUG: Existing registration details - ID: {existing_registration.id}, Status: {existing_registration.status}, Type: {'Guest' if existing_registration.is_guest_registration else 'User'}, Email: {existing_registration.guest_email or existing_registration.user.email if existing_registration.user else 'N/A'}")
            
            if existing_registration:
                if existing_registration.status == 'confirmed':
                    print(f"üîç DEBUG: BLOCKING - Email already used for confirmed registration")
                    raise serializers.ValidationError("Cet email est d√©j√† utilis√© pour une inscription confirm√©e √† cet √©v√©nement.")
                elif existing_registration.status in ['pending', 'waitlisted']:
                    print(f"üîç DEBUG: BLOCKING - Email already used for pending/waitlisted registration")
                    raise serializers.ValidationError("Cet email est d√©j√† utilis√© pour une inscription en cours √† cet √©v√©nement.")
            
            # üéØ NOUVEAU : Validation du t√©l√©phone unique
            if guest_phone:
                existing_phone_registration = EventRegistration.objects.filter(
                    event=event,
                    guest_phone=guest_phone
                ).first()
                
                if existing_phone_registration:
                    if existing_phone_registration.status == 'confirmed':
                        raise serializers.ValidationError("Ce num√©ro de t√©l√©phone est d√©j√† utilis√© pour une inscription confirm√©e √† cet √©v√©nement.")
                    elif existing_phone_registration.status in ['pending', 'waitlisted']:
                        print(f"üîç DEBUG: BLOCKING - Phone already used for pending/waitlisted registration")
                        raise serializers.ValidationError("Ce num√©ro de t√©l√©phone est d√©j√† utilis√© pour une inscription en cours √† cet √©v√©nement.")
                
                # üéØ NOUVEAU : Validation de coh√©rence pays/num√©ro COMPL√àTE
                import re
                cleaned_phone = re.sub(r'\D', '', guest_phone)
                print(f"üîç DEBUG: Validation - Phone: {guest_phone}, Cleaned: {cleaned_phone}, Country: {guest_country}")
                
                # Num√©ros canadiens (514, 438, 450, 579, 581, 819, 873)
                if cleaned_phone.startswith(('514', '438', '450', '579', '581', '819', '873')):
                    if guest_country != 'CA':
                        print(f"üîç DEBUG: BLOCKING - Num√©ro canadien ({cleaned_phone[:3]}) avec pays {guest_country}")
                        raise serializers.ValidationError(f"Le num√©ro de t√©l√©phone commence par {cleaned_phone[:3]} (Canada) mais le pays s√©lectionn√© est {guest_country}. Veuillez s√©lectionner le Canada ou utiliser un num√©ro correspondant au pays s√©lectionn√©.")
                
                # Num√©ros fran√ßais (06, 07)
                elif cleaned_phone.startswith(('06', '07')):
                    if guest_country != 'FR':
                        print(f"üîç DEBUG: BLOCKING - Num√©ro fran√ßais mobile ({cleaned_phone[:2]}) avec pays {guest_country}")
                        raise serializers.ValidationError(f"Le num√©ro de t√©l√©phone commence par {cleaned_phone[:2]} (France) mais le pays s√©lectionn√© est {guest_country}. Veuillez s√©lectionner la France ou utiliser un num√©ro correspondant au pays s√©lectionn√©.")
                
                # Num√©ros togolais (90, 91, 92, 93, 96, 97, 98, 99)
                elif cleaned_phone.startswith(('90', '91', '92', '93', '96', '97', '98', '99')):
                    if guest_country != 'TG':
                        print(f"üîç DEBUG: BLOCKING - Num√©ro togolais ({cleaned_phone[:2]}) avec pays {guest_country}")
                        raise serializers.ValidationError(f"Le num√©ro de t√©l√©phone commence par {cleaned_phone[:2]} (Togo) mais le pays s√©lectionn√© est {guest_country}. Veuillez s√©lectionner le Togo ou utiliser un num√©ro correspondant au pays s√©lectionn√©.")
                
                print(f"üîç DEBUG: Validation ACCEPTED - Num√©ro {cleaned_phone} avec pays {guest_country}")
        else:
            # üéØ VALIDATION POUR LES UTILISATEURS CONNECT√âS
            if not user or not user.is_authenticated:
                raise serializers.ValidationError("Vous devez √™tre connect√© ou fournir les informations d'invit√©.")
            
            print(f"üîç DEBUG: User registration - User: {user.username}")
            
            # V√©rifier si l'utilisateur a d√©j√† une inscription confirm√©e
            existing_confirmed = EventRegistration.objects.filter(
                event=event, 
                user=user, 
                status='confirmed'
            ).exists()
            
            print(f"üîç DEBUG: Existing confirmed: {existing_confirmed}")
            
            if existing_confirmed:
                raise serializers.ValidationError("Vous √™tes d√©j√† inscrit √† cet √©v√©nement.")
            
            # Permettre les inscriptions en attente de paiement
            existing_pending = EventRegistration.objects.filter(
                event=event, 
                user=user, 
                status='pending',
                payment_status='pending'
            ).exists()
            
            print(f"üîç DEBUG: Existing pending: {existing_pending}")
            
            if existing_pending:
                raise serializers.ValidationError("Vous avez d√©j√† une inscription en attente de paiement pour cet √©v√©nement.")
        
        # üéØ CORRECTION MAJEURE : R√©cup√©rer le ticket_type_id depuis les donn√©es de la requ√™te
        request = self.context['request']
        ticket_type_id = request.data.get('ticket_type_id')
        ticket_type = None
        if ticket_type_id:
            try:
                ticket_type = TicketType.objects.get(id=ticket_type_id, event=event)
                print(f"üîç DEBUG: Ticket type found: {ticket_type.name}")
            except TicketType.DoesNotExist:
                print(f"üîç DEBUG: Ticket type not found: {ticket_type_id}")
                raise serializers.ValidationError("Type de billet invalide.")
        
        # üéØ CORRECTION MAJEURE : S√©parer la logique des billets par d√©faut et des types de billets
        
        if ticket_type and ticket_type.event != event:
            raise serializers.ValidationError("Le type de billet ne correspond pas √† l'√©v√©nement.")
        
        # üéØ NOUVELLE LOGIQUE : Si un type de billet est s√©lectionn√©, v√©rifier SEULEMENT sa capacit√©
        if ticket_type and ticket_type.quantity is not None:
            # üéØ CORRECTION MAJEURE : Utiliser sold_count au lieu de compter les inscriptions
            confirmed_ticket_count = ticket_type.sold_count
            
            print(f"üîç DEBUG: ===== VALIDATION BILLET PERSONNALIS√â =====")
            print(f"üîç DEBUG: Custom ticket validation - {ticket_type.name}: {confirmed_ticket_count}/{ticket_type.quantity}")
            print(f"üîç DEBUG: ticket_type.is_available: {ticket_type.is_available}")
            
            # V√©rifier si le type de billet est complet
            if confirmed_ticket_count >= ticket_type.quantity:
                print(f"üîç DEBUG: Custom ticket full - Registration blocked")
                raise serializers.ValidationError(f"Le type de billet '{ticket_type.name}' est complet.")
            else:
                print(f"üîç DEBUG: Custom ticket has available places - Validation passed")
            
            print(f"üîç DEBUG: ===== FIN VALIDATION BILLET PERSONNALIS√â =====")
        else:
            # üéØ NOUVELLE LOGIQUE : Si PAS de type de billet (billet par d√©faut), v√©rifier la capacit√© globale
            if event.place_type == 'limited' and event.max_capacity:
                # Compter seulement les inscriptions confirm√©es SANS type de billet sp√©cifique
                confirmed_default_count = EventRegistration.objects.filter(
                    event=event, 
                    ticket_type__isnull=True,  # Seulement les billets par d√©faut
                    status__in=['confirmed', 'attended']
                ).count()
                
                print(f"üîç DEBUG: Default ticket validation - {confirmed_default_count}/{event.max_capacity}")
                
                # V√©rifier si l'√©v√©nement est complet et g√©rer la liste d'attente
                if confirmed_default_count >= event.max_capacity:
                    if event.enable_waitlist:
                        print(f"üîç DEBUG: Event full but waitlist enabled - User will be waitlisted")
                        # Ne pas bloquer l'inscription, permettre la liste d'attente
                    else:
                        print(f"üîç DEBUG: Event full and waitlist disabled - Registration blocked")
                        raise serializers.ValidationError("L'√©v√©nement est complet.")
        
        # üéØ NOUVELLE LOGIQUE : V√©rifier que la session est active
        session_type = data.get('session_type')
        if session_type and not session_type.is_active:
            raise serializers.ValidationError(f"La session '{session_type.name}' n'est pas active.")
        
        if session_type:
            print(f"üîç DEBUG: Session selected - {session_type.name} (active: {session_type.is_active})")
        
        # üéØ NOUVELLE LOGIQUE : G√©rer les utilisateurs connect√©s ET les invit√©s
        # NOTE: La v√©rification des inscriptions existantes est d√©j√† faite plus haut
        # Pas besoin de la refaire ici pour √©viter la duplication
        
        print(f"üîç DEBUG: Validation OK - Proceeding to create")
        
        # üéØ CORRECTION MAJEURE : Ajouter ticket_type aux donn√©es valid√©es
        if ticket_type:
            data['ticket_type'] = ticket_type
            print(f"üîç DEBUG: Ticket type added to validated data: {ticket_type.name}")
        else:
            print(f"üîç DEBUG: No ticket type provided")
        
        return data

    def create(self, validated_data):
        # üéØ NOUVEAU : Logs de d√©bogage pour create()
        print(f"üîç DEBUG: create() appel√© avec validated_data: {validated_data}")
        print(f"üîç DEBUG: Cl√©s dans validated_data: {list(validated_data.keys())}")
        
        request = self.context['request']
        user = getattr(request, 'user', None)
        event = validated_data['event']
        
        # üéØ NOUVELLE LOGIQUE : G√©rer les utilisateurs connect√©s ET les invit√©s
        guest_full_name = validated_data.get('guest_full_name')
        guest_email = validated_data.get('guest_email')
        guest_phone = validated_data.get('guest_phone')
        guest_country = validated_data.get('guest_country')
        
        # D√©terminer si c'est une inscription d'invit√©
        is_guest = bool(guest_full_name and guest_email and guest_phone and guest_country)
        
        # üéØ SUPPRIM√â : La validation emp√™che d√©j√† les doublons, pas besoin de retourner une inscription existante
        
        if is_guest:
            print(f"üîç DEBUG: Creating GUEST registration - Event: {event.title}, Guest: {guest_full_name}")
        else:
            print(f"üîç DEBUG: Creating USER registration - Event: {event.title}, User: {user.username}")
        
        print(f"üîç DEBUG: Validated data keys: {list(validated_data.keys())}")
        
        # üî• NOUVELLE LOGIQUE: D√©terminer le statut selon le type de billet
        ticket_type = validated_data.get('ticket_type')
        
        if ticket_type and ticket_type.quantity is not None:
            # Billet personnalis√© avec quantit√© limit√©e
            print(f"üîç DEBUG: Custom ticket capacity - {ticket_type.name}: {ticket_type.sold_count}/{ticket_type.quantity}")
            
            if ticket_type.sold_count >= ticket_type.quantity:
                # Billet complet - refuser l'inscription
                raise serializers.ValidationError({
                    'ticket_type': f"Le type de billet '{ticket_type.name}' est complet."
                })
            else:
                # Billet disponible - d√©terminer le statut selon le prix
                if ticket_type.price == 0:
                    status = 'confirmed'  # Confirmer directement si gratuit
                else:
                    status = 'pending'  # En attente de paiement si payant
        else:
            # Billet "Par d√©faut" - v√©rifier la capacit√© globale de l'√©v√©nement
            if event.place_type == 'limited' and event.max_capacity:
                # Compter seulement les billets par d√©faut confirm√©s
                confirmed_default_count = EventRegistration.objects.filter(
                    event=event,
                    ticket_type__isnull=True,  # Seulement les billets par d√©faut
                    status__in=['confirmed', 'attended']
                ).count()
                print(f"üîç DEBUG: Default ticket - Event capacity: {confirmed_default_count}/{event.max_capacity}")
                
                if confirmed_default_count >= event.max_capacity:
                    # √âv√©nement complet - g√©rer selon la liste d'attente
                    if event.enable_waitlist:
                        status = 'waitlisted'  # Mettre en liste d'attente
                        print(f"üîç DEBUG: Event full but waitlist enabled - Status set to waitlisted")
                    else:
                        # Refuser l'inscription
                        raise serializers.ValidationError({
                            'event': "L'√©v√©nement est complet."
                        })
                else:
                    # √âv√©nement avec places disponibles - d√©terminer le statut selon le prix
                    if event.is_free:
                        status = 'confirmed'  # Confirmer directement si gratuit
                    else:
                        status = 'pending'  # En attente de paiement si payant
            else:
                # √âv√©nement sans limite de places - d√©terminer le statut selon le prix
                if event.is_free:
                    status = 'confirmed'  # Confirmer directement si gratuit
                else:
                    status = 'pending'  # En attente de paiement si payant

        
        # Cr√©er l'inscription
        # Supprimer les champs d√©j√† pass√©s explicitement de validated_data
        data_for_create = validated_data.copy()
        data_for_create.pop('event', None)
        data_for_create.pop('status', None)
        data_for_create.pop('payment_status', None)  # Supprimer aussi payment_status
        
        # üéØ NOUVELLE LOGIQUE : Ajouter session_type si pr√©sent
        session_type_id = validated_data.get('session_type_id')
        if session_type_id:
            try:
                from events.models import SessionType
                session_type = SessionType.objects.get(id=session_type_id, event=event)
                print(f"üîç DEBUG: Session type included: {session_type.name}")
                data_for_create['session_type'] = session_type
            except SessionType.DoesNotExist:
                print(f"üîç DEBUG: Session type not found: {session_type_id}")
        else:
            print(f"üîç DEBUG: No session_type_id provided")
        
        # Supprimer session_type_id de data_for_create car ce n'est pas un champ du mod√®le
        data_for_create.pop('session_type_id', None)
        
        # üéØ CORRECTION MAJEURE : Ajouter ticket_type si pr√©sent
        if ticket_type:
            data_for_create['ticket_type'] = ticket_type
            print(f"üîç DEBUG: Ticket type included: {ticket_type.name}")
            print(f"üîç DEBUG: Ticket type ID: {ticket_type.id}")
            print(f"üîç DEBUG: Ticket type price: {ticket_type.price}")
        else:
            print(f"üîç DEBUG: No ticket type provided")
            print(f"üîç DEBUG: ticket_type variable: {ticket_type}")
            print(f"üîç DEBUG: validated_data ticket_type: {validated_data.get('ticket_type')}")
        
        print(f"üîç DEBUG: Data for create keys: {list(data_for_create.keys())}")
        
        # üéØ NOUVELLE LOGIQUE : Calculer le prix selon le type de billet
        price_paid = 0
        if ticket_type:
            # Utiliser le prix du type de billet s√©lectionn√©
            if ticket_type.is_discount_active and ticket_type.discount_price is not None:
                price_paid = ticket_type.discount_price
                print(f"üîç DEBUG: Prix avec remise: {price_paid} (prix normal: {ticket_type.price}, remise: {ticket_type.discount_price})")
            else:
                price_paid = ticket_type.price
                print(f"üîç DEBUG: Prix normal du billet: {price_paid}")
        else:
            # Utiliser le prix par d√©faut de l'√©v√©nement
            price_paid = event.price
            print(f"üîç DEBUG: Prix par d√©faut de l'√©v√©nement: {price_paid}")
        
        # Ajouter le prix calcul√© aux donn√©es de cr√©ation
        data_for_create['price_paid'] = price_paid
        
        # üéØ NOUVELLE LOGIQUE : D√©terminer le payment_status selon le statut
        payment_status = 'pending'
        if status == 'confirmed':
            payment_status = 'paid'  # Si confirm√© directement (gratuit), marquer comme pay√©
        elif status == 'waitlisted':
            payment_status = 'pending'  # En attente si en liste d'attente
        
        # üéØ NOUVELLE LOGIQUE : Cr√©er l'inscription selon le type (utilisateur ou invit√©)
        if is_guest:
            # Cr√©er une inscription d'invit√©
            registration = EventRegistration.objects.create(
                user=None,  # Pas d'utilisateur pour les invit√©s
                event=event,
                status=status,
                payment_status=payment_status,
                is_guest_registration=True,
                **data_for_create
            )
            print(f"üîç DEBUG: Guest registration created - ID: {registration.id}, Guest: {guest_full_name}")
        else:
            # Cr√©er une inscription d'utilisateur connect√©
            registration = EventRegistration.objects.create(
                user=user,
                event=event,
                status=status,
                payment_status=payment_status,
                **data_for_create
            )
            print(f"üîç DEBUG: User registration created - ID: {registration.id}, User: {user.username}")
        
        print(f"üîç DEBUG: Registration created - ID: {registration.id}, Status: {registration.status}, Payment: {registration.payment_status}")
        
        # üéØ CORRECTION MAJEURE : NE PAS incr√©menter ici - c'est fait dans EventRegistration.save()
        # La m√©thode _update_ticket_counters() dans EventRegistration.save() g√®re d√©j√† les compteurs
        print(f"üîç DEBUG: Compteurs g√©r√©s par EventRegistration.save() - Pas d'incr√©mentation ici")
        
        return registration


class EventRegistrationUpdateSerializer(serializers.ModelSerializer):
    """S√©rialiseur pour mettre √† jour une inscription"""
    class Meta:
        model = EventRegistration
        fields = ['status', 'notes', 'special_requirements']
        read_only_fields = ['id', 'user', 'event', 'registered_at', 'updated_at']

    def validate_status(self, value):
        # Emp√™cher le changement de statut vers 'confirmed' si l'√©v√©nement est complet
        if value == 'confirmed':
            event = self.instance.event
            if (event.place_type == 'limited' and 
                event.max_capacity and 
                event.current_registrations >= event.max_capacity):
                raise serializers.ValidationError("Impossible de confirmer l'inscription, l'√©v√©nement est complet.")
        
        return value

    def update(self, instance, validated_data):
        old_status = instance.status
        new_status = validated_data.get('status', old_status)
        
        # Mettre √† jour l'inscription
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()
        
        # G√©rer les changements de statut
        if old_status != new_status:
            event = instance.event
            
            # üéØ CORRECTION : Les compteurs sont g√©r√©s par EventRegistration.save()
        
        return instance


class EventListSerializer(serializers.ModelSerializer):
    """S√©rialiseur simplifi√© pour la liste des √©v√©nements"""
    category = CategorySerializer(read_only=True)
    organizer = UserSerializer(read_only=True)
    is_full = serializers.BooleanField(read_only=True)
    available_places = serializers.IntegerField(read_only=True)
    is_upcoming = serializers.BooleanField(read_only=True)
    is_ongoing = serializers.BooleanField(read_only=True)
    is_past = serializers.BooleanField(read_only=True)
    is_virtual = serializers.BooleanField(read_only=True)
    is_physical = serializers.BooleanField(read_only=True)
    registration_count = serializers.SerializerMethodField()
    interaction_count = serializers.SerializerMethodField()

    class Meta:
        model = Event
        fields = [
            'id', 'title', 'short_description', 'start_date', 'end_date',
            'location', 'event_type', 'place_type', 'max_capacity', 'price',
            'is_free', 'poster', 'banner', 'category', 'organizer', 'status',
            'is_featured', 'is_public', 'access_type', 'slug', 'created_at',
            'is_full', 'available_places', 'is_upcoming', 'is_ongoing',
            'is_past', 'is_virtual', 'is_physical', 'registration_count',
            'interaction_count', 'current_registrations'
        ]

    def get_registration_count(self, obj):
        return obj.registrations.filter(status__in=['confirmed', 'attended']).count()

    def get_interaction_count(self, obj):
        """Retourner des statistiques d√©taill√©es par type d'interaction"""
        interactions = obj.interactions.all()
        
        # Compter par type
        likes = interactions.filter(interaction_type='like').count()
        comments = interactions.filter(interaction_type='comment').count()
        shares = interactions.filter(interaction_type='share').count()
        ratings = interactions.filter(interaction_type='rating').count()
        
        # Calculer la note moyenne
        rating_interactions = interactions.filter(interaction_type='rating')
        avg_rating = 0
        if rating_interactions.exists():
            total_rating = sum(interaction.rating for interaction in rating_interactions if interaction.rating)
            avg_rating = round(total_rating / rating_interactions.count(), 1)
        
        return {
            'likes': likes,
            'comments': comments,
            'shares': shares,
            'ratings': ratings,
            'total': interactions.count(),
            'average_rating': avg_rating
        }


class VirtualEventCreateSerializer(serializers.ModelSerializer):
    """S√©rialiseur pour cr√©er un √©v√©nement virtuel"""
    event_data = EventSerializer(write_only=True)
    
    # Ajouter explicitement le champ photo pour s'assurer qu'il est inclus
    poster = serializers.ImageField(required=False, allow_null=True)
    
    class Meta:
        model = VirtualEvent
        fields = ['event_data', 'poster', 'platform', 'meeting_id', 'meeting_password', 
                 'meeting_url', 'auto_record', 'allow_chat', 'allow_screen_sharing',
                 'waiting_room', 'access_instructions', 'technical_requirements']

    def create(self, validated_data, **kwargs):
        event_data = validated_data.pop('event_data')
        event_data['event_type'] = 'virtual'
        
        # Traiter le champ photo s√©par√©ment
        poster = validated_data.pop('poster', None)
        if poster:
            event_data['poster'] = poster
        
        # Ajouter l'organisateur depuis kwargs ou le contexte
        user = kwargs.get('user')
        if not user:
            request = self.context.get('request')
            if request and request.user:
                user = request.user
        
        if user:
            event_data['organizer'] = user
        else:
            raise serializers.ValidationError("Utilisateur non connect√©")
        
        # Cr√©er l'√©v√©nement directement avec l'organisateur
        event = Event.objects.create(**event_data)
        
        # Cr√©er les d√©tails virtuels (enlever user des validated_data)
        if 'user' in validated_data:
            validated_data.pop('user')
        virtual_event = VirtualEvent.objects.create(event=event, **validated_data)
        
        # üé• LES STREAMS NE SE CR√âENT PLUS AUTOMATIQUEMENT
        # L'organisateur doit lancer le stream manuellement via le bouton "Lancer le live"
        print("üé• Stream non cr√©√© automatiquement - L'organisateur doit le lancer manuellement")
        
        return virtual_event


class VirtualEventUpdateSerializer(serializers.ModelSerializer):
    """S√©rialiseur pour mettre √† jour un √©v√©nement virtuel"""
    class Meta:
        model = VirtualEvent
        fields = ['platform', 'meeting_id', 'meeting_password', 'meeting_url',
                 'auto_record', 'allow_chat', 'allow_screen_sharing', 'waiting_room',
                 'recording_url', 'recording_available', 'recording_expires_at',
                 'access_instructions', 'technical_requirements']


class VirtualEventInteractionCreateSerializer(serializers.ModelSerializer):
    """S√©rialiseur pour cr√©er une interaction sur un √©v√©nement virtuel"""
    class Meta:
        model = VirtualEventInteraction
        fields = ['event', 'interaction_type', 'content', 'rating']
        read_only_fields = ['id', 'user', 'ip_address', 'user_agent', 'created_at', 'updated_at']

    def validate(self, data):
        event = data['event']
        user = self.context['request'].user
        
        # V√©rifier que l'√©v√©nement est virtuel
        if not event.is_virtual:
            raise serializers.ValidationError("Les interactions ne sont autoris√©es que pour les √©v√©nements virtuels.")
        
        # Permettre les interactions de base (like, share) sans inscription
        if data['interaction_type'] in ['like', 'share']:
            # Pas de v√©rification d'inscription pour les interactions simples
            pass
        else:
            # V√©rifier l'inscription pour les interactions plus engageantes
            if not EventRegistration.objects.filter(event=event, user=user, status__in=['confirmed', 'attended']).exists():
                raise serializers.ValidationError("Vous devez √™tre inscrit √† l'√©v√©nement pour commenter ou √©valuer.")
        
        # V√©rifier la note si c'est une √©valuation
        if data['interaction_type'] == 'rating':
            rating = data.get('rating')
            if not rating or rating < 1 or rating > 5:
                raise serializers.ValidationError("La note doit √™tre comprise entre 1 et 5.")
        
        return data

    def create(self, validated_data):
        user = self.context['request'].user
        request = self.context['request']
        
        # R√©cup√©rer l'IP et le User Agent
        ip_address = self._get_client_ip(request)
        user_agent = request.META.get('HTTP_USER_AGENT', '')

        
        # V√©rifier si l'interaction existe d√©j√†
        existing_interaction = VirtualEventInteraction.objects.filter(
            user=user,
            event=validated_data['event'],
            interaction_type=validated_data['interaction_type']
        ).first()
        
        if existing_interaction:
            # Si c'est un like, le supprimer (toggle)
            if validated_data['interaction_type'] == 'like':
                existing_interaction.delete()
                # Retourner un objet vide pour √©viter l'erreur serializer
                return VirtualEventInteraction()
            else:
                # Pour les autres types, mettre √† jour
                existing_interaction.content = validated_data.get('content', '')
                existing_interaction.rating = validated_data.get('rating')
                existing_interaction.save()
                return existing_interaction
        
        # Cr√©er une nouvelle interaction
        interaction = VirtualEventInteraction.objects.create(
            user=user,
            ip_address=ip_address,
            user_agent=user_agent,
            **validated_data
        )
        
        return interaction

    def _get_client_ip(self, request):
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip


# Premier s√©rialiseur supprim√© - conflit avec le second


class CustomReminderCreateSerializer(serializers.ModelSerializer):
    """S√©rialiseur pour cr√©er un rappel personnalis√©"""
    custom_recipient_ids = serializers.ListField(
        child=serializers.IntegerField(),
        required=False,
        write_only=True,
        help_text="Liste des IDs d'inscriptions pour ciblage personnalis√©"
    )
    
    class Meta:
        model = CustomReminder
        fields = [
            'event', 'title', 'message', 'reminder_type', 'target_audience',
            'send_email', 'send_sms', 'scheduled_at', 'custom_recipient_ids'
        ]
    
    def validate_custom_recipient_ids(self, value):
        """Validation des destinataires personnalis√©s"""
        if not value:
            return value
        
        # V√©rifier que tous les IDs correspondent √† des inscriptions de l'√©v√©nement
        event = self.initial_data.get('event')
        if event:
            valid_registrations = EventRegistration.objects.filter(
                id__in=value,
                event_id=event
            ).count()
            
            if valid_registrations != len(value):
                raise serializers.ValidationError("Certains destinataires ne sont pas valides pour cet √©v√©nement.")
        
        return value
    
    def create(self, validated_data):
        """Cr√©er le rappel personnalis√©"""
        custom_recipient_ids = validated_data.pop('custom_recipient_ids', [])
        
        # Cr√©er le rappel
        reminder = CustomReminder.objects.create(
            created_by=self.context['request'].user,
            **validated_data
        )
        
        # Ajouter les destinataires personnalis√©s si sp√©cifi√©s
        if custom_recipient_ids:
            custom_recipients = EventRegistration.objects.filter(id__in=custom_recipient_ids)
            reminder.custom_recipients.set(custom_recipients)
        
        # Calculer le nombre total de destinataires
        try:
            # V√©rifier si le champ total_recipients existe
            if hasattr(reminder, 'total_recipients'):
                reminder.total_recipients = reminder.get_recipients().count()
                reminder.save()
            else:
                print("üîç DEBUG: Champ total_recipients n'existe pas encore dans la base de donn√©es")
        except Exception as e:
            print(f"üîç DEBUG: Erreur lors du calcul des destinataires: {e}")
            if hasattr(reminder, 'total_recipients'):
                reminder.total_recipients = 0
                reminder.save()
        
        return reminder


class CustomReminderRecipientSerializer(serializers.ModelSerializer):
    """S√©rialiseur pour les destinataires personnalis√©s des rappels"""
    guest_name = serializers.SerializerMethodField()
    guest_email = serializers.SerializerMethodField()
    guest_phone = serializers.SerializerMethodField()
    status = serializers.SerializerMethodField()
    
    class Meta:
        model = CustomReminderRecipient
        fields = ['id', 'guest_name', 'guest_email', 'guest_phone', 'status']
        read_only_fields = ['id']
    
    def get_guest_name(self, obj):
        if obj.registration.user:
            return f"{obj.registration.user.first_name} {obj.registration.user.last_name}".strip() or obj.registration.user.username
        else:
            return obj.registration.guest_full_name
    
    def get_guest_email(self, obj):
        if obj.registration.user:
            return obj.registration.user.email
        else:
            return obj.registration.guest_email
    
    def get_guest_phone(self, obj):
        if obj.registration.user and hasattr(obj.registration.user, 'profile'):
            return obj.registration.user.profile.phone
        else:
            return obj.registration.guest_phone
    
    def get_status(self, obj):
        return obj.registration.status


class CustomReminderSerializer(serializers.ModelSerializer):
    """S√©rialiseur pour les rappels personnalis√©s"""
    event_title = serializers.CharField(source='event.title', read_only=True)
    organizer_name = serializers.CharField(source='created_by.username', read_only=True)
    reminder_type_display = serializers.CharField(read_only=True)
    target_audience_display = serializers.CharField(read_only=True)
    recipients_count = serializers.IntegerField(read_only=True)
    custom_recipients = CustomReminderRecipientSerializer(source='recipient_entries', many=True, read_only=True)
    
    # üéØ NOUVEAU: Champ pour choisir entre manuel et automatique
    send_mode = serializers.ChoiceField(
        choices=[
            ('manual', 'Envoi manuel'),
            ('automatic', 'Envoi automatique')
        ],
        write_only=True,
        required=False,  # Rendre optionnel pour compatibilit√©
        default='manual',  # Valeur par d√©faut
        help_text="Choisir entre envoi manuel (brouillon) ou automatique (programm√©)"
    )
    
    class Meta:
        model = CustomReminder
        fields = [
            'id', 'title', 'message', 'reminder_type', 'reminder_type_display',
            'target_audience', 'target_audience_display', 'send_email', 'send_sms',
            'scheduled_at', 'sent_at', 'status', 'emails_sent', 'sms_sent',
            'emails_failed', 'sms_failed', 'created_at', 'updated_at',
            'event', 'event_title', 'created_by', 'organizer_name',
            'recipients_count', 'custom_recipients', 'send_mode'
        ]
        read_only_fields = [
            'id', 'created_by', 'sent_at', 'emails_sent', 'sms_sent',
            'emails_failed', 'sms_failed', 'created_at', 'updated_at'
        ]
    
    def validate(self, data):
        """Validation personnalis√©e"""
        # V√©rifier qu'au moins un canal d'envoi est s√©lectionn√©
        if not data.get('send_email', False) and not data.get('send_sms', False):
            raise serializers.ValidationError(
                "Au moins un canal d'envoi (email ou SMS) doit √™tre s√©lectionn√©."
            )
        
        # V√©rifier que la date de programmation est dans le futur
        if data.get('scheduled_at'):
            if data['scheduled_at'] <= timezone.now():
                raise serializers.ValidationError(
                    "La date de programmation doit √™tre dans le futur."
                )
        
        return data
    
    def create(self, validated_data):
        """Cr√©er un rappel avec l'organisateur automatiquement d√©fini"""
        print(f"üîç DEBUG: CustomReminderSerializer.create() D√âBUT")
        print(f"üîç DEBUG: validated_data re√ßu: {validated_data}")
        print(f"üîç DEBUG: validated_data keys: {list(validated_data.keys())}")
        
        validated_data['created_by'] = self.context['request'].user
        print(f"üîç DEBUG: created_by ajout√©: {validated_data['created_by']}")
        
        # Ajouter total_recipients avec une valeur par d√©faut
        validated_data['total_recipients'] = 0
        print(f"üîç DEBUG: total_recipients ajout√©: {validated_data['total_recipients']}")
        
        # üéØ NOUVEAU: Gestion du mode d'envoi
        send_mode = validated_data.pop('send_mode', 'manual')  # Par d√©faut: manuel
        scheduled_at = validated_data.get('scheduled_at')
        
        print(f"üîç DEBUG: Mode d'envoi choisi: {send_mode}")
        print(f"üîç DEBUG: Heure programm√©e: {scheduled_at}")
        
        if send_mode == 'automatic':
            # Mode automatique: n√©cessite une heure programm√©e
            if not scheduled_at:
                raise serializers.ValidationError(
                    "Pour l'envoi automatique, une heure de programmation est requise."
                )
            from django.utils import timezone
            if scheduled_at <= timezone.now():
                raise serializers.ValidationError(
                    "Pour l'envoi automatique, l'heure doit √™tre dans le futur."
                )
            validated_data['status'] = 'scheduled'
            print(f"üîç DEBUG: Mode automatique - Statut d√©fini √† 'scheduled'")
        else:
            # Mode manuel: statut brouillon par d√©faut
            validated_data['status'] = 'draft'
            print(f"üîç DEBUG: Mode manuel - Statut d√©fini √† 'draft'")
            # Si une heure est fournie en mode manuel, on la garde mais on reste en brouillon
            if scheduled_at:
                print(f"üîç DEBUG: Heure programm√©e fournie en mode manuel: {scheduled_at}")
        
        print(f"üîç DEBUG: validated_data final: {validated_data}")
        
        try:
            result = super().create(validated_data)
            print(f"üîç DEBUG: CustomReminder cr√©√© avec succ√®s: {result}")
            print(f"üîç DEBUG: ID du rappel cr√©√©: {result.id}")
            print(f"üîç DEBUG: Statut final: {result.status}")
            return result
        except Exception as e:
            print(f"üîç DEBUG: ERREUR lors de la cr√©ation: {e}")
            print(f"üîç DEBUG: Type d'erreur: {type(e)}")
            raise