"""
üé® G√âN√âRATEUR AUTOMATIQUE DE CONTENU POUR √âV√âNEMENTS
Service d'IA pour g√©n√©rer automatiquement :
- Descriptions d'√©v√©nements
- Suggestions de visuels
- Hashtags optimis√©s
"""

import logging
import re
from typing import Dict, List, Optional, Tuple
from django.utils import timezone
from datetime import datetime

logger = logging.getLogger(__name__)

class EventContentGenerator:
    """
    G√©n√©rateur automatique de contenu pour les √©v√©nements
    Utilise des mod√®les pr√©-entra√Æn√©s et des r√®gles intelligentes
    """
    
    def __init__(self):
        """Initialise le g√©n√©rateur de contenu"""
        self.templates = self._load_templates()
        self.hashtag_database = self._load_hashtag_database()
        self.visual_suggestions = self._load_visual_suggestions()
        
    def _load_templates(self) -> Dict:
        """Charge les mod√®les de description par cat√©gorie"""
        return {
            "Conf√©rence": {
                "intro_patterns": [
                    "D√©couvrez {topic} lors de cette conf√©rence exclusive",
                    "Une conf√©rence passionnante sur {topic}",
                    "Plongez dans l'univers de {topic} avec nos experts",
                    "Une conf√©rence incontournable sur {topic}"
                ],
                "content_patterns": [
                    "Nos intervenants partageront leur expertise et leur vision sur {topic}",
                    "Vous d√©couvrirez les derni√®res tendances et innovations dans le domaine de {topic}",
                    "Un programme riche avec des pr√©sentations, des √©changes et des networking",
                    "Une opportunit√© unique d'apprendre et de r√©seauter avec des professionnels"
                ],
                "outro_patterns": [
                    "Ne manquez pas cette conf√©rence qui va transformer votre vision de {topic}",
                    "Inscrivez-vous d√®s maintenant pour cette conf√©rence exceptionnelle",
                    "Une exp√©rience enrichissante qui va marquer votre parcours professionnel"
                ]
            },
            "Concert": {
                "intro_patterns": [
                    "Vivez une exp√©rience musicale unique avec {topic}",
                    "Un concert exceptionnel de {topic}",
                    "Laissez-vous porter par la musique de {topic}",
                    "Une soir√©e inoubliable avec {topic}"
                ],
                "content_patterns": [
                    "Une ambiance festive et conviviale vous attend",
                    "D√©couvrez des artistes talentueux dans un cadre intimiste",
                    "Une programmation musicale vari√©e et de qualit√©",
                    "Partagez des moments de pure √©motion musicale"
                ],
                "outro_patterns": [
                    "R√©servez vos places pour cette soir√©e musicale exceptionnelle",
                    "Une exp√©rience musicale qui restera grav√©e dans vos m√©moires",
                    "Ne manquez pas ce concert qui va vous faire vibrer"
                ]
            },
            "Sport": {
                "intro_patterns": [
                    "Participez √† une activit√© sportive passionnante : {topic}",
                    "Rejoignez-nous pour une session de {topic}",
                    "Une exp√©rience sportive unique autour de {topic}",
                    "D√©fiez-vous avec {topic}"
                ],
                "content_patterns": [
                    "Une activit√© adapt√©e √† tous les niveaux, d√©butants comme confirm√©s",
                    "Un encadrement professionnel pour progresser en toute s√©curit√©",
                    "Une ambiance conviviale et motivante pour se d√©passer",
                    "Des √©quipements de qualit√© pour une exp√©rience optimale"
                ],
                "outro_patterns": [
                    "Inscrivez-vous pour cette activit√© sportive qui va vous faire du bien",
                    "Une exp√©rience sportive qui va transformer votre quotidien",
                    "Rejoignez-nous pour cette aventure sportive exceptionnelle"
                ]
            },
            "Workshop": {
                "intro_patterns": [
                    "Apprenez {topic} lors de ce workshop pratique",
                    "Un workshop interactif sur {topic}",
                    "D√©veloppez vos comp√©tences en {topic}",
                    "Une formation pratique sur {topic}"
                ],
                "content_patterns": [
                    "Un apprentissage par la pratique avec des exercices concrets",
                    "Des formateurs exp√©riment√©s pour vous accompagner",
                    "Un programme progressif adapt√© √† votre niveau",
                    "Des supports de cours et des ressources compl√©mentaires"
                ],
                "outro_patterns": [
                    "Inscrivez-vous √† ce workshop qui va booster vos comp√©tences",
                    "Une formation pratique qui va transformer votre approche",
                    "Ne manquez pas cette opportunit√© d'apprentissage unique"
                ]
            },
            "Meetup": {
                "intro_patterns": [
                    "Rejoignez notre communaut√© autour de {topic}",
                    "Un meetup convivial sur {topic}",
                    "√âchangez avec des passionn√©s de {topic}",
                    "Une rencontre enrichissante sur {topic}"
                ],
                "content_patterns": [
                    "Un espace d'√©change et de partage d'exp√©riences",
                    "Des pr√©sentations courtes suivies de discussions",
                    "Une ambiance d√©contract√©e pour r√©seauter",
                    "Des sujets vari√©s et des intervenants passionn√©s"
                ],
                "outro_patterns": [
                    "Rejoignez-nous pour ce meetup qui va enrichir votre r√©seau",
                    "Une rencontre qui va vous inspirer et vous motiver",
                    "Inscrivez-vous pour partager et apprendre ensemble"
                ]
            }
        }
        
    def _load_hashtag_database(self) -> Dict:
        """Charge la base de donn√©es des hashtags par cat√©gorie"""
        return {
            "Conf√©rence": [
                "#Conf√©rence", "#√âv√©nement", "#Formation", "#Expertise", "#Innovation",
                "#Professionnel", "#D√©veloppement", "#Leadership", "#Strat√©gie", "#Business"
            ],
            "Concert": [
                "#Concert", "#Musique", "#Live", "#Artiste", "#Spectacle",
                "#Soir√©e", "#Ambiance", "#Culture", "#Divertissement", "#√âmotion"
            ],
            "Sport": [
                "#Sport", "#Activit√©", "#Fitness", "#Bien√™tre", "#Sant√©",
                "#D√©fis", "#Performance", "#√âquipe", "#Motivation", "#Energie"
            ],
            "Workshop": [
                "#Workshop", "#Formation", "#Apprentissage", "#Pratique", "#Comp√©tences",
                "#D√©veloppement", "#Formation", "#Expertise", "#Progression", "#Savoir"
            ],
            "Meetup": [
                "#Meetup", "#Communaut√©", "#R√©seau", "#Partage", "#√âchange",
                "#Passion", "#Inspiration", "#Collaboration", "#Innovation", "#D√©couverte"
            ]
        }
        
    def _load_visual_suggestions(self) -> Dict:
        """Charge les suggestions de visuels par type d'√©v√©nement"""
        return {
            "Conf√©rence": {
                "colors": ["#1976d2", "#0d47a1", "#1565c0", "#42a5f5"],
                "themes": ["professionnel", "corporate", "moderne", "√©l√©gant"],
                "elements": ["graphiques", "diagrammes", "ic√¥nes", "typographie"],
                "style": "√©pur√© et professionnel"
            },
            "Concert": {
                "colors": ["#e91e63", "#c2185b", "#ad1457", "#f48fb1"],
                "themes": ["artistique", "cr√©atif", "dynamique", "expressif"],
                "elements": ["instruments", "notes de musique", "gradients", "formes organiques"],
                "style": "cr√©atif et √©nergique"
            },
            "Sport": {
                "colors": ["#4caf50", "#2e7d32", "#388e3c", "#81c784"],
                "themes": ["dynamique", "actif", "motivant", "√©nergique"],
                "elements": ["√©quipements sportifs", "mouvement", "d√©fis", "performance"],
                "style": "dynamique et motivant"
            },
            "Workshop": {
                "colors": ["#ff9800", "#f57c00", "#ef6c00", "#ffb74d"],
                "themes": ["√©ducatif", "interactif", "pratique", "apprentissage"],
                "elements": ["outils", "processus", "collaboration", "progression"],
                "style": "√©ducatif et engageant"
            },
            "Meetup": {
                "colors": ["#9c27b0", "#7b1fa2", "#6a1b9a", "#ba68c8"],
                "themes": ["communautaire", "convivial", "partage", "r√©seau"],
                "elements": ["personnes", "connexions", "partage", "communaut√©"],
                "style": "convivial et communautaire"
            }
        }
    
    def generate_event_description(self, title: str, category: str, location: str, 
                                 price: float = 0, max_capacity: int = None) -> str:
        """
        G√©n√®re automatiquement une description d'√©v√©nement
        
        Args:
            title: Titre de l'√©v√©nement
            category: Cat√©gorie de l'√©v√©nement
            location: Lieu de l'√©v√©nement
            price: Prix de l'√©v√©nement
            max_capacity: Capacit√© maximale
            
        Returns:
            Description g√©n√©r√©e automatiquement
        """
        try:
            # Extraire le th√®me principal du titre
            topic = self._extract_topic_from_title(title)
            
            # Obtenir le template pour la cat√©gorie
            category_template = self.templates.get(category, self.templates.get("Conf√©rence", {}))
            
            # G√©n√©rer la description
            description_parts = []
            
            # Introduction
            if category_template.get("intro_patterns"):
                intro = self._select_random_pattern(category_template["intro_patterns"])
                description_parts.append(intro.format(topic=topic))
            
            # Contenu principal
            if category_template.get("content_patterns"):
                content = self._select_random_pattern(category_template["content_patterns"])
                description_parts.append(content.format(topic=topic))
            
            # Informations pratiques
            practical_info = self._generate_practical_info(location, price, max_capacity)
            if practical_info:
                description_parts.append(practical_info)
            
            # Conclusion
            if category_template.get("outro_patterns"):
                outro = self._select_random_pattern(category_template["outro_patterns"])
                description_parts.append(outro.format(topic=topic))
            
            # Assembler la description
            description = " ".join(description_parts)
            
            # Nettoyer et formater
            description = self._clean_and_format_description(description)
            
            logger.info(f"Description g√©n√©r√©e pour l'√©v√©nement '{title}': {len(description)} caract√®res")
            
            return description
            
        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration de description: {str(e)}")
            return f"Un √©v√©nement passionnant sur {title} √† {location}. Rejoignez-nous pour une exp√©rience unique !"
    
    def generate_hashtags(self, title: str, category: str, description: str = None) -> List[str]:
        """
        G√©n√®re des hashtags optimis√©s pour la visibilit√©
        
        Args:
            title: Titre de l'√©v√©nement
            category: Cat√©gorie de l'√©v√©nement
            description: Description de l'√©v√©nement (optionnel)
            
        Returns:
            Liste de hashtags optimis√©s
        """
        try:
            hashtags = []
            
            # Hashtags de base par cat√©gorie
            category_hashtags = self.hashtag_database.get(category, [])
            hashtags.extend(category_hashtags[:3])  # Prendre les 3 premiers
            
            # Hashtags sp√©cifiques au titre
            title_keywords = self._extract_keywords_from_title(title)
            for keyword in title_keywords[:3]:  # Maximum 3 hashtags du titre
                hashtag = f"#{keyword.capitalize()}"
                if hashtag not in hashtags:
                    hashtags.append(hashtag)
            
            # Hashtags de localisation
            location_hashtags = self._generate_location_hashtags(title)
            hashtags.extend(location_hashtags[:2])  # Maximum 2 hashtags de localisation
            
            # Hashtags de description si disponible
            if description:
                desc_keywords = self._extract_keywords_from_description(description)
                for keyword in desc_keywords[:2]:  # Maximum 2 hashtags de la description
                    hashtag = f"#{keyword.capitalize()}"
                    if hashtag not in hashtags and len(hashtag) <= 20:  # Limiter la longueur
                        hashtags.append(hashtag)
            
            # Hashtags g√©n√©riques populaires
            generic_hashtags = ["#√âv√©nement", "#D√©couverte", "#Exp√©rience", "#Incontournable"]
            for hashtag in generic_hashtags:
                if len(hashtags) < 10:  # Maximum 10 hashtags au total
                    hashtags.append(hashtag)
            
            # Nettoyer et limiter
            hashtags = hashtags[:10]  # Maximum 10 hashtags
            hashtags = [self._clean_hashtag(hashtag) for hashtag in hashtags]
            
            logger.info(f"Hashtags g√©n√©r√©s pour '{title}': {len(hashtags)} hashtags")
            
            return hashtags
            
        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration des hashtags: {str(e)}")
            return ["#√âv√©nement", "#D√©couverte"]
    
    def generate_visual_suggestions(self, category: str, title: str, description: str = None) -> Dict:
        """
        G√©n√®re des suggestions de visuels bas√©es sur le contenu
        
        Args:
            category: Cat√©gorie de l'√©v√©nement
            title: Titre de l'√©v√©nement
            description: Description de l'√©v√©nement (optionnel)
            
        Returns:
            Suggestions de visuels (couleurs, th√®mes, √©l√©ments)
        """
        try:
            # Obtenir les suggestions de base pour la cat√©gorie
            base_suggestions = self.visual_suggestions.get(category, {})
            
            # Analyser le titre pour des suggestions personnalis√©es
            title_analysis = self._analyze_title_for_visuals(title)
            
            # Analyser la description si disponible
            desc_analysis = {}
            if description:
                desc_analysis = self._analyze_description_for_visuals(description)
            
            # Combiner toutes les suggestions
            suggestions = {
                "colors": base_suggestions.get("colors", ["#1976d2", "#42a5f5"]),
                "themes": base_suggestions.get("themes", ["moderne", "professionnel"]),
                "elements": base_suggestions.get("elements", ["ic√¥nes", "typographie"]),
                "style": base_suggestions.get("style", "moderne et √©l√©gant"),
                "personalized": {
                    "title_insights": title_analysis,
                    "description_insights": desc_analysis
                },
                "recommendations": self._generate_visual_recommendations(
                    category, title_analysis, desc_analysis
                )
            }
            
            logger.info(f"Suggestions visuelles g√©n√©r√©es pour '{title}'")
            
            return suggestions
            
        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration des suggestions visuelles: {str(e)}")
            return {
                "colors": ["#1976d2", "#42a5f5"],
                "themes": ["moderne", "professionnel"],
                "elements": ["ic√¥nes", "typographie"],
                "style": "moderne et √©l√©gant",
                "personalized": {},
                "recommendations": ["Utilisez un design √©pur√© et professionnel"]
            }
    
    def _extract_topic_from_title(self, title: str) -> str:
        """Extrait le th√®me principal du titre"""
        # Mots √† ignorer
        stop_words = ["le", "la", "les", "un", "une", "des", "et", "ou", "avec", "pour", "sur", "dans", "√†", "de"]
        
        # Nettoyer le titre
        clean_title = re.sub(r'[^\w\s]', ' ', title.lower())
        words = [word for word in clean_title.split() if word not in stop_words and len(word) > 2]
        
        # Retourner le premier mot significatif ou le titre complet
        return words[0].capitalize() if words else title[:20]
    
    def _select_random_pattern(self, patterns: List[str]) -> str:
        """S√©lectionne un pattern al√©atoire"""
        import random
        return random.choice(patterns)
    
    def _generate_practical_info(self, location: str, price: float, max_capacity: int) -> str:
        """G√©n√®re les informations pratiques"""
        info_parts = []
        
        if location:
            info_parts.append(f"Lieu : {location}")
        
        if price == 0:
            info_parts.append("Entr√©e gratuite")
        elif price > 0:
            info_parts.append(f"Prix : {price}‚Ç¨")
        
        if max_capacity:
            info_parts.append(f"Places limit√©es : {max_capacity} participants")
        
        if info_parts:
            return " ".join(info_parts) + "."
        
        return ""
    
    def _clean_and_format_description(self, description: str) -> str:
        """Nettoie et formate la description"""
        # Supprimer les espaces multiples
        description = re.sub(r'\s+', ' ', description)
        
        # Capitaliser la premi√®re lettre
        description = description.strip().capitalize()
        
        # Ajouter un point final si n√©cessaire
        if not description.endswith(('.', '!', '?')):
            description += "."
        
        return description
    
    def _extract_keywords_from_title(self, title: str) -> List[str]:
        """Extrait les mots-cl√©s du titre"""
        # Nettoyer et extraire les mots significatifs
        clean_title = re.sub(r'[^\w\s]', ' ', title.lower())
        words = clean_title.split()
        
        # Filtrer les mots courts et les mots communs
        stop_words = ["le", "la", "les", "un", "une", "des", "et", "ou", "avec", "pour", "sur", "dans", "√†", "de", "du"]
        keywords = [word for word in words if word not in stop_words and len(word) > 2]
        
        return keywords[:5]  # Maximum 5 mots-cl√©s
    
    def _generate_location_hashtags(self, title: str) -> List[str]:
        """G√©n√®re des hashtags de localisation"""
        # Mots de localisation courants
        location_words = ["montreal", "lom√©", "paris", "lyon", "marseille", "london", "newyork"]
        
        hashtags = []
        title_lower = title.lower()
        
        for location in location_words:
            if location in title_lower:
                hashtags.append(f"#{location.capitalize()}")
        
        return hashtags
    
    def _extract_keywords_from_description(self, description: str) -> List[str]:
        """Extrait les mots-cl√©s de la description"""
        # Nettoyer la description
        clean_desc = re.sub(r'[^\w\s]', ' ', description.lower())
        words = clean_desc.split()
        
        # Filtrer les mots communs
        stop_words = ["le", "la", "les", "un", "une", "des", "et", "ou", "avec", "pour", "sur", "dans", "√†", "de", "du", "ce", "cette", "ces", "qui", "que", "quoi", "comment", "quand", "o√π", "pourquoi"]
        keywords = [word for word in words if word not in stop_words and len(word) > 3]
        
        return keywords[:3]  # Maximum 3 mots-cl√©s
    
    def _clean_hashtag(self, hashtag: str) -> str:
        """Nettoie un hashtag"""
        # Supprimer les caract√®res sp√©ciaux
        clean = re.sub(r'[^\w#]', '', hashtag)
        
        # S'assurer qu'il commence par #
        if not clean.startswith('#'):
            clean = '#' + clean
        
        return clean
    
    def _analyze_title_for_visuals(self, title: str) -> Dict:
        """Analyse le titre pour des suggestions visuelles"""
        analysis = {
            "mood": "neutre",
            "intensity": "mod√©r√©e",
            "keywords": []
        }
        
        title_lower = title.lower()
        
        # Analyser l'ambiance
        if any(word in title_lower for word in ["festival", "c√©l√©bration", "f√™te", "carnaval"]):
            analysis["mood"] = "festif"
            analysis["intensity"] = "√©lev√©e"
        elif any(word in title_lower for word in ["calme", "zen", "m√©ditation", "relaxation"]):
            analysis["mood"] = "apaisant"
            analysis["intensity"] = "faible"
        elif any(word in title_lower for word in ["dynamique", "√©nergie", "puissance", "force"]):
            analysis["mood"] = "√©nergique"
            analysis["intensity"] = "√©lev√©e"
        
        # Extraire les mots-cl√©s visuels
        visual_keywords = ["couleur", "lumi√®re", "ombre", "forme", "texture", "espace"]
        analysis["keywords"] = [word for word in visual_keywords if word in title_lower]
        
        return analysis
    
    def _analyze_description_for_visuals(self, description: str) -> Dict:
        """Analyse la description pour des suggestions visuelles"""
        analysis = {
            "emotions": [],
            "concepts": [],
            "visual_elements": []
        }
        
        if not description:
            return analysis
            
        desc_lower = description.lower()
        
        # √âmotions
        emotions = ["passion", "joie", "excitation", "s√©r√©nit√©", "myst√®re", "aventure"]
        analysis["emotions"] = [emotion for emotion in emotions if emotion in desc_lower]
        
        # Concepts
        concepts = ["innovation", "tradition", "modernit√©", "authenticit√©", "excellence", "cr√©ativit√©"]
        analysis["concepts"] = [concept for concept in concepts if concept in desc_lower]
        
        # √âl√©ments visuels
        visual_elements = ["couleurs", "formes", "lignes", "espaces", "textures", "mouvements"]
        analysis["visual_elements"] = [element for element in visual_elements if element in desc_lower]
        
        return analysis
    
    def _generate_visual_recommendations(self, category: str, title_analysis: Dict, desc_analysis: Dict) -> List[str]:
        """G√©n√®re des recommandations visuelles personnalis√©es"""
        recommendations = []
        
        # Recommandations bas√©es sur la cat√©gorie
        if category == "Concert":
            recommendations.append("Utilisez des couleurs vives et des formes dynamiques")
            recommendations.append("Int√©grez des √©l√©ments musicaux dans le design")
        elif category == "Conf√©rence":
            recommendations.append("Privil√©giez un design √©pur√© et professionnel")
            recommendations.append("Utilisez une typographie claire et lisible")
        elif category == "Sport":
            recommendations.append("Choisissez des couleurs √©nergiques et motivantes")
            recommendations.append("Int√©grez des √©l√©ments de mouvement et de dynamisme")
        
        # Recommandations bas√©es sur l'analyse du titre
        if title_analysis["mood"] == "festif":
            recommendations.append("Adoptez une palette de couleurs festive et joyeuse")
        elif title_analysis["mood"] == "apaisant":
            recommendations.append("Utilisez des couleurs douces et apaisantes")
        elif title_analysis["mood"] == "√©nergique":
            recommendations.append("Privil√©giez des contrastes forts et des couleurs vives")
        
        # Recommandations bas√©es sur l'analyse de la description
        if desc_analysis["emotions"]:
            recommendations.append(f"Traduisez l'√©motion '{desc_analysis['emotions'][0]}' dans le design")
        
        if desc_analysis["concepts"]:
            recommendations.append(f"Repr√©sentez le concept '{desc_analysis['concepts'][0]}' visuellement")
        
        return recommendations[:5]  # Maximum 5 recommandations

def get_content_generator():
    """Retourne une instance du g√©n√©rateur de contenu"""
    return EventContentGenerator()
